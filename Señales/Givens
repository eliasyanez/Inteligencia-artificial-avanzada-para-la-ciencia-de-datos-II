{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyONe4GQz8u261IdIq7WJgBM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Algorithm: Givens Rotation\n","\n","Input: F, Qt-1, St-1\n","\n","Output: Stp\n","\n","m <- size of St-1\n","\n","U <- [(F.T * St-1.T) / Qt-1.T/2]    size 2m x m\n","\n","for j <- 1 to m do\n","  \n","  for i <- 2m: -1 : j+1 do\n","    \n","    B <- I  size 2m x 2m\n","    a <- Ui-1j\n","    b <- Uij\n","    if b = 0 then\n","      c <- 1\n","      s <- 0\n","    else\n","      if abs(b) > abs(a) then\n","        r <- a/b\n","        s <- 1/raiz(1+rcuadrada)\n","        c <- s x r\n","      else\n","        r <- b/a\n","        c <- 1/raiz(1+rcuadrada)\n","        s <- c x r\n","      end if\n","    end if\n","  B|t-1,t|,|t-1,t| = [[c  -s],[s c]]\n","  \n","  U <- B.T * U\n","\n","end for\n","\n","end for\n","\n","Stp <- U|1:m|,|1:m|"],"metadata":{"id":"U5AVFWfnFEVu"}},{"cell_type":"code","source":["import numpy as np\n","\n","def givens_rotation(F, Qt_1, St_1):\n","    # Dimensiones de St_1\n","    m = St_1.shape[0]\n","\n","    # Construir la matriz U\n","    U = np.vstack([(F.T @ St_1.T) / (Qt_1.T / 2 + 1e-8), Qt_1 / 2])  # Concatenamos verticalmente F @ St_1 y Qt_1 / 2\n","\n","    # Aplicamos las rotaciones de Givens\n","    for j in range(m):\n","        for i in range(2*m - 1, j, -1):\n","            B = np.eye(2*m)  # Matriz identidad\n","\n","            a = U[i-1, j]\n","            b = U[i, j]\n","\n","            # Condiciones para definir c y s\n","            if b == 0:\n","                c = 1\n","                s = 0\n","            else:\n","                if abs(b) > abs(a):\n","                    r = a / b\n","                    s = 1 / np.sqrt(1 + r**2)\n","                    c = s * r\n","                else:\n","                    r = b / a\n","                    c = 1 / np.sqrt(1 + r**2)\n","                    s = c * r\n","\n","            # Definir la submatriz B en los elementos correspondientes\n","            B = np.eye(2*m)\n","            B[i-1:i+1, i-1:i+1] = [[c, -s], [s, c]]\n","\n","            # Actualizar U con la rotación de Givens\n","            U = B.T @ U\n","\n","    # Extraer la submatriz triangular superior\n","    Spt = U[:m, :m]\n","\n","    return Spt"],"metadata":{"id":"WPBAHVkQJKxt","executionInfo":{"status":"ok","timestamp":1729296648832,"user_tz":360,"elapsed":822,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Definir las matrices de entrada F, Qt_1 y St_1\n","F = np.array([\n","    [1, 1],\n","    [0, 1]\n","])\n","\n","Qt_1 = np.array([\n","    [0, 0],\n","    [0, 2]\n","])\n","\n","St_1 = np.array([\n","    [1, 0],\n","    [0, 1]\n","])\n","\n","# Llamar a la función givens_rotation con las matrices de entrada\n","Spt = givens_rotation(F, Qt_1, St_1)\n","\n","# Definir un formateador para la impresión\n","float_formatter = lambda x: \"{:.5g}\".format(x) if 1e-8 < abs(x) < 1 else \"{:.4g}\".format(x) if abs(x) >= 1 else \"0\"\n","# Formato con 5 dígitos si es menor a 1, de lo contrario 4 dígitos, si es menor a 1e-8, entonces 0\n","# Configurar la precisión de impresión con el formateador personalizado\n","np.set_printoptions(formatter={'float_kind':float_formatter})\n","\n","# Imprimir la matriz resultante Spt\n","print(\"La submatriz triangular superior Spt es:\")\n","print(Spt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOs5L5XCJn7E","executionInfo":{"status":"ok","timestamp":1729296649198,"user_tz":360,"elapsed":3,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"aaded17d-ea29-4bd0-cd6f-95183987024d"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["La submatriz triangular superior Spt es:\n","[[1.414e+08 0.70711]\n"," [0 1.225]]\n"]}]}]}