{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP39klYOqrK1myPys05PsNC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Potter's algorithm\n","\n","Input: Xtp, Stp, Yt, H, R\n","\n","Output: Xt, St\n","\n","Initialize X0,t <- Xtp and S0,t <- Stp\n","\n","for i <- 1 to n do \"(n = tamaño de Yt)\"\n","+ Hi <- ith row of H\n","+ Yi,t <- ith element of Y\n","+ Ri <- variance of ith measurement\n","+ (Encontrar S despues de que la medida i ha sido procesada)\n","+ (phi)i <- Si-1.T,t Hi.T\n","+ ai <- 1/((phi)i.T (phi)i + Ri)\n","+ (gama)i <- ai/(1 + raiz(ai Ri))\n","+ Si,t <- Si-1,t(I-ai (gama)i (phi)i (phi)i.T)\n","+ Ki,t <- Si,t (phi)i  \"(ganancia de kalman)\"\n","+ Xi,t = Xi-1,t + Ki,t (Yi,t - Hi Xi-1,t)\n","\n","Se establece el estado anterior\n","\n","St = Sn,t\n","\n","Xt = Xn,t"],"metadata":{"id":"BONCstaWRVPf"}},{"cell_type":"code","source":["import numpy as np\n","\n","def potter_algorithm(Xtp, Stp, Yt, H, R):\n","  \"\"\"Implementación del algoritmo de Potter para el filtro de Kalman.\n","\n","  Args:\n","    Xtp: Predicción previa del estado.\n","    Stp: Covarianza de la predicción previa.\n","    Yt: Mediciones.\n","    H: Matriz de observación.\n","    R: Varianza de las mediciones.\n","\n","  Returns:\n","    Xt: Estimación del estado.\n","    St: Covarianza de la estimación.\n","  \"\"\"\n","\n","  # Inicializar X0,t <- Xtp y S0,t <- Stp\n","  Xt = Xtp\n","  St = Stp\n","\n","  # Iterar a través de las mediciones\n","  for i in range(len(Yt)):\n","    # Obtener la fila i-ésima de H\n","    Hi = H[i, :]\n","\n","    # Obtener el elemento i-ésimo de Y\n","    Yi_t = Yt[i]\n","\n","    # Obtener la varianza de la i-ésima medición\n","    Ri = R[i]\n","\n","    # Calcular phi_i\n","    phi_i = St @ Hi.T\n","\n","    # Calcular ai\n","    ai = 1 / (phi_i.T @ phi_i + Ri)\n","\n","    # Calcular gamma_i\n","    gamma_i = ai / (1 + np.sqrt(ai * Ri))\n","\n","    # Actualizar Si,t, incluyendo la matriz identidad I\n","    St = St @ (I - (I * ai * gamma_i * (phi_i @ phi_i.T)))\n","\n","    # Calcular la ganancia de Kalman Ki,t\n","    Ki_t = St @ phi_i\n","\n","    # Actualizar Xi,t\n","    Xt = Xt + Ki_t * (Yi_t - Hi @ Xt)\n","\n","  # Establecer el estado anterior\n","  St = St\n","  Xt = Xt\n","\n","  return Xt, St\n","\n","# Ejemplo de uso\n","Xtp = np.array([0, 0])\n","Stp = np.array([[1, 0], [0, 1]])\n","Yt = np.array([1, 2])\n","H = np.array([[1, 0], [0, 1]])\n","R = np.array([0.1, 0.1])  # Modificado para que R tenga la misma dimensión que Yt\n","I = np.eye(2)\n","\n","\n","Xt, St = potter_algorithm(Xtp, Stp, Yt, H, R)\n","\n","print(\"Estimación del estado:\", Xt)\n","print(\"Covarianza de la estimación:\", St)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z-zzz0oXeLTq","executionInfo":{"status":"ok","timestamp":1728614889413,"user_tz":360,"elapsed":188,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"df9f7eca-37b0-4b23-bd0f-16950ef407a3"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Estimación del estado: [ 0.36501031 -0.12792691]\n","Covarianza de la estimación: [[-0.17523739  0.        ]\n"," [ 0.         -0.17523739]]\n"]}]}]}