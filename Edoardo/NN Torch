{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNc0tWAmsq3oY7/Mqn7pH9D"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":19,"metadata":{"id":"6ldglTzK6twz","executionInfo":{"status":"ok","timestamp":1727315114356,"user_tz":360,"elapsed":174,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn"]},{"cell_type":"code","source":["#Create a simple tensor\n","x = torch.tensor([[1.0,2.0],[3.0,3.0,],[4.0,5.0]])\n","print(x)\n","\n","#Perform basic tensor operations\n","print(f\"Shape of tensor: {x.shape}\")\n","print(f\"Sum of elements: {torch.sum(x)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MP-KGHkb62Se","executionInfo":{"status":"ok","timestamp":1727315114538,"user_tz":360,"elapsed":12,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"2ced5b9a-70a6-430a-ee94-5a89412e133a"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 2.],\n","        [3., 3.],\n","        [4., 5.]])\n","Shape of tensor: torch.Size([3, 2])\n","Sum of elements: 18.0\n"]}]},{"cell_type":"code","source":["torch.reshape(x,(3,2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vReJ3EIl7Szw","executionInfo":{"status":"ok","timestamp":1727315114538,"user_tz":360,"elapsed":9,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"e0c7137b-e4bb-42a0-91c1-7790d11ad854"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1., 2.],\n","        [3., 3.],\n","        [4., 5.]])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#Define a simple neural network\n","class SimpleNN(nn.Module):\n","  def __init__(self, imput_size, hidden_size, output_size):\n","    super(SimpleNN,self).__init__()\n","    self.fc1 = nn.Linear(imput_size,hidden_size)\n","    self.relu = nn.ReLU()\n","    self.fc2 = nn.Linear(hidden_size,output_size)\n","\n","  def forward(self,x):\n","    out = self.fc1(x)\n","    out = self.relu(out)\n","    out = self.fc2(out)\n","    return out\n","\n","#Instantiate the network\n","net = SimpleNN(imput_size=3,hidden_size=4,output_size=1)\n","print(net)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RBGjrwpT8J--","executionInfo":{"status":"ok","timestamp":1727315114539,"user_tz":360,"elapsed":8,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"832abbfe-ef45-4ddc-860e-1ecbf0c8de92"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["SimpleNN(\n","  (fc1): Linear(in_features=3, out_features=4, bias=True)\n","  (relu): ReLU()\n","  (fc2): Linear(in_features=4, out_features=1, bias=True)\n",")\n"]}]},{"cell_type":"code","source":["#Random input\n","x = torch.tensor([[0.3, 0.2, 0.1],[0.5, 0.4, 0.3]])\n","output = net(x)\n","print(f\"Output: {output}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0LTTdzkI-6Np","executionInfo":{"status":"ok","timestamp":1727315114539,"user_tz":360,"elapsed":7,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"12497088-d0d7-4336-918f-49410361fc38"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Output: tensor([[ 0.0091],\n","        [-0.1271]], grad_fn=<AddmmBackward0>)\n"]}]},{"cell_type":"code","source":["#Loss function\n","#regression\n","criterion = nn.MSELoss()\n","\n","#classification\n","#criterion = nn.CrossEntropyLoss()\n","\n","#Sample target\n","target = torch.tensor([[0.1],[0.2]])\n","\n","#Compute loss\n","loss = criterion(output,target)\n","print(f\"Loss: {loss.item()}\")\n","\n","#Perform backward pass\n","loss.backward()\n","\n","#Check gradients\n","for param in net.parameters():\n","  print(param.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jQ95Dky6_hCt","executionInfo":{"status":"ok","timestamp":1727315114749,"user_tz":360,"elapsed":215,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"f6cdbc25-fa85-4b82-841d-d3ac0a36c16c"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Loss: 0.05762219801545143\n","tensor([[-0.0105, -0.0084, -0.0063],\n","        [ 0.0000,  0.0000,  0.0000],\n","        [-0.0659, -0.0515, -0.0370],\n","        [ 0.0697,  0.0544,  0.0392]])\n","tensor([-0.0210,  0.0000, -0.1444,  0.1527])\n","tensor([[-0.0517,  0.0000, -0.0725, -0.1983]])\n","tensor([-0.4179])\n"]}]},{"cell_type":"code","source":["import torch.optim as optim\n","#Optimizer\n","optimizer = optim.SGD(net.parameters(),lr=0.01)\n","\n","#Training loop\n","for epoch in range(100):\n","  #Zero the gradient\n","  optimizer.zero_grad()\n","\n","  #Forward pass\n","  output = net(x)\n","\n","  #Compute loss\n","  loss = criterion(output,target)\n","\n","  #Backward pass\n","  loss.backward()\n","\n","  #Update weights\n","  optimizer.step()\n","\n","if epoch % 10 == 0:\n","  print(f\"Epoch [{epoch+1}/100], Loss: {loss.item():.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"W3jODqtpA6C0","executionInfo":{"status":"error","timestamp":1727316690207,"user_tz":360,"elapsed":200,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"fafa3c01-27ab-41a0-b18b-c082b121646d"},"execution_count":27,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Expected input batch_size (10) to match target batch_size (2).","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-92e7b53b2735>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m   \u001b[0;31m#Compute loss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m   \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0;31m#Backward pass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1552\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1553\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1554\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1555\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1560\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1561\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, target)\u001b[0m\n\u001b[1;32m   1186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1188\u001b[0;31m         return F.cross_entropy(input, target, weight=self.weight,\n\u001b[0m\u001b[1;32m   1189\u001b[0m                                \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mignore_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m                                label_smoothing=self.label_smoothing)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mcross_entropy\u001b[0;34m(input, target, weight, size_average, ignore_index, reduce, reduction, label_smoothing)\u001b[0m\n\u001b[1;32m   3102\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msize_average\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mreduce\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3103\u001b[0m         \u001b[0mreduction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_get_string\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msize_average\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3104\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_nn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcross_entropy_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_enum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel_smoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Expected input batch_size (10) to match target batch_size (2)."]}]},{"cell_type":"markdown","source":["crear red con 2 capas escondidas que sea clasificadora"],"metadata":{"id":"y1wb44_eD-Wa"}},{"cell_type":"code","source":["# prompt: Generate a neural network with 2 hidden layers thats a clasifier\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","class ClassifierNN(nn.Module):\n","  def __init__(self, input_size, hidden_size1, hidden_size2, output_size):\n","    super(ClassifierNN, self).__init__()\n","    self.fc1 = nn.Linear(input_size, hidden_size1)\n","    self.relu1 = nn.ReLU()\n","    self.fc2 = nn.Linear(hidden_size1, hidden_size2)\n","    self.relu2 = nn.ReLU()\n","    self.fc3 = nn.Linear(hidden_size2, output_size)\n","    self.softmax = nn.Softmax(dim=1)  # Softmax for classification\n","\n","  def forward(self, x):\n","    out = self.fc1(x)\n","    out = self.relu1(out)\n","    out = self.fc2(out)\n","    out = self.relu2(out)\n","    out = self.fc3(out)\n","    out = self.softmax(out)  # Apply softmax for probabilities\n","    return out\n","\n","# Example usage:\n","input_size = 3\n","hidden_size1 = 5\n","hidden_size2 = 3\n","output_size = 2  # Assuming 2 classes\n","\n","classifier_net = ClassifierNN(input_size, hidden_size1, hidden_size2, output_size)\n","print(classifier_net)\n","\n","# Example input (replace with your actual data)\n","x = torch.randn(10, input_size)\n","\n","# Forward pass\n","output = classifier_net(x)\n","print(output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LHz4coV9EfhN","executionInfo":{"status":"ok","timestamp":1727316298885,"user_tz":360,"elapsed":188,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"1e94373c-279f-4394-88f0-fd3e9650f80f"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["ClassifierNN(\n","  (fc1): Linear(in_features=3, out_features=5, bias=True)\n","  (relu1): ReLU()\n","  (fc2): Linear(in_features=5, out_features=3, bias=True)\n","  (relu2): ReLU()\n","  (fc3): Linear(in_features=3, out_features=2, bias=True)\n","  (softmax): Softmax(dim=1)\n",")\n","tensor([[0.5009, 0.4991],\n","        [0.4731, 0.5269],\n","        [0.5074, 0.4926],\n","        [0.5057, 0.4943],\n","        [0.5049, 0.4951],\n","        [0.4977, 0.5023],\n","        [0.5271, 0.4729],\n","        [0.4953, 0.5047],\n","        [0.5497, 0.4503],\n","        [0.5122, 0.4878]], grad_fn=<SoftmaxBackward0>)\n"]}]},{"cell_type":"code","source":["# Define the loss function and optimizer\n","criterion = nn.CrossEntropyLoss()  # Use CrossEntropyLoss for classification\n","optimizer = optim.Adam(classifier_net.parameters(), lr=0.001)  # Adam optimizer\n","\n","# Training loop\n","epochs = 100\n","for epoch in range(epochs):\n","  # Forward pass\n","  outputs = classifier_net(x)\n","\n","  # Assuming you have target labels (replace with your actual labels)\n","  labels = torch.randint(0, output_size, (10,))\n","\n","  # Compute the loss\n","  loss = criterion(outputs, labels)\n","\n","  # Backward pass and optimization\n","  optimizer.zero_grad()\n","  loss.backward()\n","  optimizer.step()\n","\n","  if (epoch+1) % 10 == 0:\n","    print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0K2-t7JrFbci","executionInfo":{"status":"ok","timestamp":1727316501373,"user_tz":360,"elapsed":1916,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"53de36d6-ff29-49ad-b0a5-f45c03d22256"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Loss: 0.6899\n","Epoch [20/100], Loss: 0.6905\n","Epoch [30/100], Loss: 0.6947\n","Epoch [40/100], Loss: 0.7069\n","Epoch [50/100], Loss: 0.6869\n","Epoch [60/100], Loss: 0.6844\n","Epoch [70/100], Loss: 0.6816\n","Epoch [80/100], Loss: 0.6805\n","Epoch [90/100], Loss: 0.6857\n","Epoch [100/100], Loss: 0.7036\n"]}]},{"cell_type":"code","source":["import torch\n","from torch.utils.data import Dataset\n","from torchvision import datasets\n","from torchvision.transforms import ToTensor\n","import matplotlib.pyplot as plt\n","\n","\n","training_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=True,\n","    download=True,\n","    transform=ToTensor()\n",")\n","\n","test_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=False,\n","    download=True,\n","    transform=ToTensor()\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AglTrpsNG0EY","executionInfo":{"status":"ok","timestamp":1727316846162,"user_tz":360,"elapsed":5555,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"d38509a3-98dd-4311-8647-b508fb1173e9"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 26421880/26421880 [00:01<00:00, 19068438.34it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 29515/29515 [00:00<00:00, 302267.55it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4422102/4422102 [00:00<00:00, 5508914.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 5148/5148 [00:00<00:00, 5138571.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader\n","\n","class FashionMNISTNet(nn.Module):\n","    def __init__(self):\n","        super(FashionMNISTNet, self).__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10),\n","            nn.Softmax(dim=1) # Add softmax activation\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits\n","\n","# Initialize the model\n","model = FashionMNISTNet()\n","\n","# Define the loss function and optimizer\n","loss_fn = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-3)\n","\n","# Create data loaders\n","train_dataloader = DataLoader(training_data, batch_size=64)\n","test_dataloader = DataLoader(test_data, batch_size=64)\n","\n","# Training loop\n","def train(dataloader, model, loss_fn, optimizer):\n","    size = len(dataloader.dataset)\n","    model.train()\n","    for batch, (X, y) in enumerate(dataloader):\n","        # Compute prediction and loss\n","        pred = model(X)\n","        loss = loss_fn(pred, y)\n","\n","        # Backpropagation\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        if batch % 100 == 0:\n","            loss, current = loss.item(), batch * len(X)\n","            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")\n","\n","# Test loop\n","def test(dataloader, model, loss_fn):\n","    size = len(dataloader.dataset)\n","    num_batches = len(dataloader)\n","    model.eval()\n","    test_loss, correct = 0, 0\n","    with torch.no_grad():\n","        for X, y in dataloader:\n","            pred = model(X)\n","            test_loss += loss_fn(pred, y).item()\n","            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n","    test_loss /= num_batches\n","    correct /= size\n","    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")\n","\n","epochs = 5\n","for t in range(epochs):\n","    print(f\"Epoch {t+1}\\n-------------------------------\")\n","    train(train_dataloader, model, loss_fn, optimizer)\n","    test(test_dataloader, model, loss_fn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727319798327,"user_tz":360,"elapsed":128651,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"7414f11e-7e81-499d-8238-c66649552a3e","id":"GzzcD__PRAMF"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1\n","-------------------------------\n","loss: 2.301567  [    0/60000]\n","loss: 1.796435  [ 6400/60000]\n","loss: 1.728577  [12800/60000]\n","loss: 1.782831  [19200/60000]\n","loss: 1.723129  [25600/60000]\n","loss: 1.729959  [32000/60000]\n","loss: 1.685902  [38400/60000]\n","loss: 1.644752  [44800/60000]\n","loss: 1.730318  [51200/60000]\n","loss: 1.757177  [57600/60000]\n","Test Error: \n"," Accuracy: 76.7%, Avg loss: 1.693677 \n","\n","Epoch 2\n","-------------------------------\n","loss: 1.647335  [    0/60000]\n","loss: 1.666565  [ 6400/60000]\n","loss: 1.666397  [12800/60000]\n","loss: 1.743267  [19200/60000]\n","loss: 1.666876  [25600/60000]\n","loss: 1.643672  [32000/60000]\n","loss: 1.620221  [38400/60000]\n","loss: 1.677664  [44800/60000]\n","loss: 1.653779  [51200/60000]\n","loss: 1.662149  [57600/60000]\n","Test Error: \n"," Accuracy: 80.0%, Avg loss: 1.660245 \n","\n","Epoch 3\n","-------------------------------\n","loss: 1.590483  [    0/60000]\n","loss: 1.591997  [ 6400/60000]\n","loss: 1.607837  [12800/60000]\n","loss: 1.693576  [19200/60000]\n","loss: 1.662399  [25600/60000]\n","loss: 1.647654  [32000/60000]\n","loss: 1.578828  [38400/60000]\n","loss: 1.636800  [44800/60000]\n","loss: 1.629287  [51200/60000]\n","loss: 1.661233  [57600/60000]\n","Test Error: \n"," Accuracy: 82.9%, Avg loss: 1.632154 \n","\n","Epoch 4\n","-------------------------------\n","loss: 1.543361  [    0/60000]\n","loss: 1.575023  [ 6400/60000]\n","loss: 1.590323  [12800/60000]\n","loss: 1.661827  [19200/60000]\n","loss: 1.618333  [25600/60000]\n","loss: 1.640957  [32000/60000]\n","loss: 1.576979  [38400/60000]\n","loss: 1.635920  [44800/60000]\n","loss: 1.589416  [51200/60000]\n","loss: 1.616960  [57600/60000]\n","Test Error: \n"," Accuracy: 83.7%, Avg loss: 1.623499 \n","\n","Epoch 5\n","-------------------------------\n","loss: 1.573005  [    0/60000]\n","loss: 1.567273  [ 6400/60000]\n","loss: 1.601930  [12800/60000]\n","loss: 1.709452  [19200/60000]\n","loss: 1.683638  [25600/60000]\n","loss: 1.671316  [32000/60000]\n","loss: 1.608647  [38400/60000]\n","loss: 1.642884  [44800/60000]\n","loss: 1.653649  [51200/60000]\n","loss: 1.634028  [57600/60000]\n","Test Error: \n"," Accuracy: 83.5%, Avg loss: 1.625948 \n","\n"]}]}]}