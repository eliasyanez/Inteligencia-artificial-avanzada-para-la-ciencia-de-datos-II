{"cells":[{"cell_type":"markdown","metadata":{"id":"lywCrTV0Cnet"},"source":["Path de carpeta: /content/drive/My Drive/ITD/Int Artificial Avanzada/Parte 2/Pytorch/Proyecto"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WYpgkKmeCc-R","outputId":"6585a3ab-52ee-4c75-af26-1b1921bb8e6f","executionInfo":{"status":"ok","timestamp":1732833917479,"user_tz":360,"elapsed":28336,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Test-1542969243754.csv\n","Test_Inpatientdata-1542969243754.csv.zip\n","Test_Outpatientdata-1542969243754.csv.zip\n","Train-1542865627584.csv\n","Train_Beneficiarydata-1542865627584.csv.zip\n","Train_Inpatientdata-1542865627584.csv.zip\n","Train_Outpatientdata-1542865627584.csv.zip\n","Test_Beneficiarydata-1542969243754.csv.zip\n","Leer archivos.ipynb\n","Documentación Fraude de Proveedores Médicos.gdoc\n","Leer_archivos.ipynb\n"]}],"source":["import os\n","from google.colab import drive\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# Define la ruta a la carpeta\n","ruta_carpeta = '/content/drive/My Drive/ITD/Int Artificial Avanzada/Parte 2/Pytorch/Proyecto'\n","\n","# Obtén una lista de todos los archivos y carpetas dentro de la carpeta\n","elementos = os.listdir(ruta_carpeta)\n","\n","# Imprime la lista de archivos y carpetas\n","for elemento in elementos:\n","  print(elemento)"]},{"cell_type":"markdown","metadata":{"id":"9PlJ2CbXEA6i"},"source":["Nombres de archivos:\n","+ Test-1542969243754.csv\n","+ Test_Inpatientdata-1542969243754.csv.zip\n","+ Test_Outpatientdata-1542969243754.csv.zip\n","+ Train-1542865627584.csv\n","+ Train_Beneficiarydata-1542865627584.csv.zip\n","+ Train_Inpatientdata-1542865627584.csv.zip\n","+ Train_Outpatientdata-1542865627584.csv.zip\n","+ Test_Beneficiarydata-1542969243754.csv.zip\n","+ Leer archivos.ipynb"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nIiK4oPuFJqe"},"outputs":[],"source":["import pandas as pd\n","import zipfile\n","import os\n","\n","# Define la ruta a la carpeta\n","ruta_carpeta = '/content/drive/My Drive/ITD/Int Artificial Avanzada/Parte 2/Pytorch/Proyecto'\n","\n","# Función para leer un archivo CSV o un CSV dentro de un ZIP\n","def leer_archivo(ruta_archivo):\n","  if ruta_archivo.endswith('.csv'):\n","    return pd.read_csv(ruta_archivo)\n","  elif ruta_archivo.endswith('.zip'):\n","    with zipfile.ZipFile(ruta_archivo, 'r') as zip_ref:\n","      nombre_archivo_csv = zip_ref.namelist()[0]\n","      with zip_ref.open(nombre_archivo_csv) as archivo_csv:\n","        return pd.read_csv(archivo_csv)\n","  else:\n","    return None  # Ignorar archivos que no sean CSV o ZIP\n","\n","# Leer todos los archivos en la carpeta\n","dataframes = {}\n","for elemento in os.listdir(ruta_carpeta):\n","  ruta_archivo = os.path.join(ruta_carpeta, elemento)\n","  df = leer_archivo(ruta_archivo)\n","  if df is not None:\n","    dataframes[elemento] = df"]},{"cell_type":"markdown","metadata":{"id":"KbWny1F6FgaY"},"source":["# Train-1542865627584.csv"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"mytGDiHdFkg5","outputId":"8bd23a1f-d300-4fc3-8184-5b114b5de966","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":45,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Provider PotentialFraud\n","0  PRV51001             No\n","1  PRV51003            Yes\n","2  PRV51004             No\n","3  PRV51005            Yes\n","4  PRV51007             No"],"text/html":["\n","  <div id=\"df-c3e4aad9-d550-482f-a212-7c819095f1fd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Provider</th>\n","      <th>PotentialFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PRV51001</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PRV51003</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PRV51004</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PRV51005</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PRV51007</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3e4aad9-d550-482f-a212-7c819095f1fd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c3e4aad9-d550-482f-a212-7c819095f1fd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c3e4aad9-d550-482f-a212-7c819095f1fd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9bc78b84-85b9-4364-8501-818f108f894a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bc78b84-85b9-4364-8501-818f108f894a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9bc78b84-85b9-4364-8501-818f108f894a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"#df_train\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Provider\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"PRV51003\",\n          \"PRV51007\",\n          \"PRV51004\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["# Accede al DataFrame 'Train-1542865627584.csv'\n","df_train_target = dataframes['Train-1542865627584.csv']\n","\n","# Visualiza las primeras 5 filas\n","df_train_target.head()\n","\n","# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","#df_train.info()\n","\n","# Visualiza estadísticas descriptivas de las columnas numéricas\n","#df_train.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cReLpXe4buhP","outputId":"e0e033bd-24be-4663-a5ec-1ef632a98c3f","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":30,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5410 entries, 0 to 5409\n","Data columns (total 2 columns):\n"," #   Column          Non-Null Count  Dtype \n","---  ------          --------------  ----- \n"," 0   Provider        5410 non-null   object\n"," 1   PotentialFraud  5410 non-null   object\n","dtypes: object(2)\n","memory usage: 84.7+ KB\n"]}],"source":["# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","df_train_target.info()"]},{"cell_type":"markdown","metadata":{"id":"7dfhplV8GVjE"},"source":["Columnas: Provider\tPotentialFraud\n","\n","+ 0\tPRV51001\tNo\n","+ 1\tPRV51003\tYes\n","+ 2\tPRV51004\tNo\n","+ 3\tPRV51005\tYes\n","+ 4\tPRV51007\tNo"]},{"cell_type":"markdown","metadata":{"id":"5pyCBDZsHvqS"},"source":["# Train_Beneficiarydata-1542865627584.csv.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":343},"id":"T9c1yjGSHyOg","outputId":"6a29b086-54df-4378-db9d-5ea4a744cf0d","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":26,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      BeneID         DOB  DOD  Gender  Race RenalDiseaseIndicator  State  \\\n","0  BENE11001  1943-01-01  NaN       1     1                     0     39   \n","1  BENE11002  1936-09-01  NaN       2     1                     0     39   \n","2  BENE11003  1936-08-01  NaN       1     1                     0     52   \n","3  BENE11004  1922-07-01  NaN       1     1                     0     39   \n","4  BENE11005  1935-09-01  NaN       1     1                     0     24   \n","\n","   County  NoOfMonths_PartACov  NoOfMonths_PartBCov  ...  \\\n","0     230                   12                   12  ...   \n","1     280                   12                   12  ...   \n","2     590                   12                   12  ...   \n","3     270                   12                   12  ...   \n","4     680                   12                   12  ...   \n","\n","   ChronicCond_Depression  ChronicCond_Diabetes  ChronicCond_IschemicHeart  \\\n","0                       1                     1                          1   \n","1                       2                     2                          2   \n","2                       2                     2                          1   \n","3                       2                     1                          1   \n","4                       2                     1                          2   \n","\n","   ChronicCond_Osteoporasis  ChronicCond_rheumatoidarthritis  \\\n","0                         2                                1   \n","1                         2                                2   \n","2                         2                                2   \n","3                         1                                1   \n","4                         2                                2   \n","\n","   ChronicCond_stroke  IPAnnualReimbursementAmt  IPAnnualDeductibleAmt  \\\n","0                   1                     36000                   3204   \n","1                   2                         0                      0   \n","2                   2                         0                      0   \n","3                   2                         0                      0   \n","4                   2                         0                      0   \n","\n","   OPAnnualReimbursementAmt  OPAnnualDeductibleAmt  \n","0                        60                     70  \n","1                        30                     50  \n","2                        90                     40  \n","3                      1810                    760  \n","4                      1790                   1200  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-560533d8-0bb6-495b-bca3-4921eea11403\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BeneID</th>\n","      <th>DOB</th>\n","      <th>DOD</th>\n","      <th>Gender</th>\n","      <th>Race</th>\n","      <th>RenalDiseaseIndicator</th>\n","      <th>State</th>\n","      <th>County</th>\n","      <th>NoOfMonths_PartACov</th>\n","      <th>NoOfMonths_PartBCov</th>\n","      <th>...</th>\n","      <th>ChronicCond_Depression</th>\n","      <th>ChronicCond_Diabetes</th>\n","      <th>ChronicCond_IschemicHeart</th>\n","      <th>ChronicCond_Osteoporasis</th>\n","      <th>ChronicCond_rheumatoidarthritis</th>\n","      <th>ChronicCond_stroke</th>\n","      <th>IPAnnualReimbursementAmt</th>\n","      <th>IPAnnualDeductibleAmt</th>\n","      <th>OPAnnualReimbursementAmt</th>\n","      <th>OPAnnualDeductibleAmt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BENE11001</td>\n","      <td>1943-01-01</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>230</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36000</td>\n","      <td>3204</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BENE11002</td>\n","      <td>1936-09-01</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>280</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BENE11003</td>\n","      <td>1936-08-01</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>590</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>90</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BENE11004</td>\n","      <td>1922-07-01</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>270</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1810</td>\n","      <td>760</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BENE11005</td>\n","      <td>1935-09-01</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>24</td>\n","      <td>680</td>\n","      <td>12</td>\n","      <td>12</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1790</td>\n","      <td>1200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-560533d8-0bb6-495b-bca3-4921eea11403')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-560533d8-0bb6-495b-bca3-4921eea11403 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-560533d8-0bb6-495b-bca3-4921eea11403');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-089d2909-0c8a-43af-a1df-3a884aaa9bd8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-089d2909-0c8a-43af-a1df-3a884aaa9bd8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-089d2909-0c8a-43af-a1df-3a884aaa9bd8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":5}],"source":["# Accede al DataFrame 'Train_Beneficiarydata-1542865627584.csv.zip'\n","df_train_beneficiary = dataframes['Train_Beneficiarydata-1542865627584.csv.zip']\n","\n","# Visualiza las primeras 5 filas\n","df_train_beneficiary.head()\n","\n","# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","#df_train.info()\n","\n","# Visualiza estadísticas descriptivas de las columnas numéricas\n","#df_train.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lFA3sURAcWBO","outputId":"3ebf86e2-f176-4320-b7d3-1d443f4179e5","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":24,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 138556 entries, 0 to 138555\n","Data columns (total 25 columns):\n"," #   Column                           Non-Null Count   Dtype \n","---  ------                           --------------   ----- \n"," 0   BeneID                           138556 non-null  object\n"," 1   DOB                              138556 non-null  object\n"," 2   DOD                              1421 non-null    object\n"," 3   Gender                           138556 non-null  int64 \n"," 4   Race                             138556 non-null  int64 \n"," 5   RenalDiseaseIndicator            138556 non-null  object\n"," 6   State                            138556 non-null  int64 \n"," 7   County                           138556 non-null  int64 \n"," 8   NoOfMonths_PartACov              138556 non-null  int64 \n"," 9   NoOfMonths_PartBCov              138556 non-null  int64 \n"," 10  ChronicCond_Alzheimer            138556 non-null  int64 \n"," 11  ChronicCond_Heartfailure         138556 non-null  int64 \n"," 12  ChronicCond_KidneyDisease        138556 non-null  int64 \n"," 13  ChronicCond_Cancer               138556 non-null  int64 \n"," 14  ChronicCond_ObstrPulmonary       138556 non-null  int64 \n"," 15  ChronicCond_Depression           138556 non-null  int64 \n"," 16  ChronicCond_Diabetes             138556 non-null  int64 \n"," 17  ChronicCond_IschemicHeart        138556 non-null  int64 \n"," 18  ChronicCond_Osteoporasis         138556 non-null  int64 \n"," 19  ChronicCond_rheumatoidarthritis  138556 non-null  int64 \n"," 20  ChronicCond_stroke               138556 non-null  int64 \n"," 21  IPAnnualReimbursementAmt         138556 non-null  int64 \n"," 22  IPAnnualDeductibleAmt            138556 non-null  int64 \n"," 23  OPAnnualReimbursementAmt         138556 non-null  int64 \n"," 24  OPAnnualDeductibleAmt            138556 non-null  int64 \n","dtypes: int64(21), object(4)\n","memory usage: 26.4+ MB\n"]}],"source":["# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","df_train_beneficiary.info()"]},{"cell_type":"markdown","metadata":{"id":"7HIi4dAALXOf"},"source":["# Train_Inpatientdata-1542865627584.csv.zip\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"Png4QUQUKhh4","outputId":"2ffe6c93-8351-4ee6-94b4-d8928161654e","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":21,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      BeneID   ClaimID ClaimStartDt  ClaimEndDt  Provider  \\\n","0  BENE11001  CLM46614   2009-04-12  2009-04-18  PRV55912   \n","1  BENE11001  CLM66048   2009-08-31  2009-09-02  PRV55907   \n","2  BENE11001  CLM68358   2009-09-17  2009-09-20  PRV56046   \n","3  BENE11011  CLM38412   2009-02-14  2009-02-22  PRV52405   \n","4  BENE11014  CLM63689   2009-08-13  2009-08-30  PRV56614   \n","\n","   InscClaimAmtReimbursed AttendingPhysician OperatingPhysician  \\\n","0                   26000          PHY390922                NaN   \n","1                    5000          PHY318495          PHY318495   \n","2                    5000          PHY372395                NaN   \n","3                    5000          PHY369659          PHY392961   \n","4                   10000          PHY379376          PHY398258   \n","\n","  OtherPhysician AdmissionDt  ... ClmDiagnosisCode_7  ClmDiagnosisCode_8  \\\n","0            NaN  2009-04-12  ...               2724               19889   \n","1            NaN  2009-08-31  ...                NaN                 NaN   \n","2      PHY324689  2009-09-17  ...                NaN                 NaN   \n","3      PHY349768  2009-02-14  ...              25062               40390   \n","4            NaN  2009-08-13  ...               5119               29620   \n","\n","  ClmDiagnosisCode_9 ClmDiagnosisCode_10 ClmProcedureCode_1  \\\n","0               5849                 NaN                NaN   \n","1                NaN                 NaN             7092.0   \n","2                NaN                 NaN                NaN   \n","3               4019                 NaN              331.0   \n","4              20300                 NaN             3893.0   \n","\n","  ClmProcedureCode_2 ClmProcedureCode_3 ClmProcedureCode_4 ClmProcedureCode_5  \\\n","0                NaN                NaN                NaN                NaN   \n","1                NaN                NaN                NaN                NaN   \n","2                NaN                NaN                NaN                NaN   \n","3                NaN                NaN                NaN                NaN   \n","4                NaN                NaN                NaN                NaN   \n","\n","  ClmProcedureCode_6  \n","0                NaN  \n","1                NaN  \n","2                NaN  \n","3                NaN  \n","4                NaN  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-6de52d65-8ae5-4487-8198-8c40cef5138a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BeneID</th>\n","      <th>ClaimID</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>AttendingPhysician</th>\n","      <th>OperatingPhysician</th>\n","      <th>OtherPhysician</th>\n","      <th>AdmissionDt</th>\n","      <th>...</th>\n","      <th>ClmDiagnosisCode_7</th>\n","      <th>ClmDiagnosisCode_8</th>\n","      <th>ClmDiagnosisCode_9</th>\n","      <th>ClmDiagnosisCode_10</th>\n","      <th>ClmProcedureCode_1</th>\n","      <th>ClmProcedureCode_2</th>\n","      <th>ClmProcedureCode_3</th>\n","      <th>ClmProcedureCode_4</th>\n","      <th>ClmProcedureCode_5</th>\n","      <th>ClmProcedureCode_6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BENE11001</td>\n","      <td>CLM46614</td>\n","      <td>2009-04-12</td>\n","      <td>2009-04-18</td>\n","      <td>PRV55912</td>\n","      <td>26000</td>\n","      <td>PHY390922</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2009-04-12</td>\n","      <td>...</td>\n","      <td>2724</td>\n","      <td>19889</td>\n","      <td>5849</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BENE11001</td>\n","      <td>CLM66048</td>\n","      <td>2009-08-31</td>\n","      <td>2009-09-02</td>\n","      <td>PRV55907</td>\n","      <td>5000</td>\n","      <td>PHY318495</td>\n","      <td>PHY318495</td>\n","      <td>NaN</td>\n","      <td>2009-08-31</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7092.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BENE11001</td>\n","      <td>CLM68358</td>\n","      <td>2009-09-17</td>\n","      <td>2009-09-20</td>\n","      <td>PRV56046</td>\n","      <td>5000</td>\n","      <td>PHY372395</td>\n","      <td>NaN</td>\n","      <td>PHY324689</td>\n","      <td>2009-09-17</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BENE11011</td>\n","      <td>CLM38412</td>\n","      <td>2009-02-14</td>\n","      <td>2009-02-22</td>\n","      <td>PRV52405</td>\n","      <td>5000</td>\n","      <td>PHY369659</td>\n","      <td>PHY392961</td>\n","      <td>PHY349768</td>\n","      <td>2009-02-14</td>\n","      <td>...</td>\n","      <td>25062</td>\n","      <td>40390</td>\n","      <td>4019</td>\n","      <td>NaN</td>\n","      <td>331.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BENE11014</td>\n","      <td>CLM63689</td>\n","      <td>2009-08-13</td>\n","      <td>2009-08-30</td>\n","      <td>PRV56614</td>\n","      <td>10000</td>\n","      <td>PHY379376</td>\n","      <td>PHY398258</td>\n","      <td>NaN</td>\n","      <td>2009-08-13</td>\n","      <td>...</td>\n","      <td>5119</td>\n","      <td>29620</td>\n","      <td>20300</td>\n","      <td>NaN</td>\n","      <td>3893.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6de52d65-8ae5-4487-8198-8c40cef5138a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6de52d65-8ae5-4487-8198-8c40cef5138a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6de52d65-8ae5-4487-8198-8c40cef5138a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c7d59169-4d07-41a5-b865-ba8c85afb3e0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7d59169-4d07-41a5-b865-ba8c85afb3e0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c7d59169-4d07-41a5-b865-ba8c85afb3e0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":7}],"source":["# Accede al DataFrame 'Train_Inpatientdata-1542865627584.csv.zip'\n","df_train_inpatient = dataframes['Train_Inpatientdata-1542865627584.csv.zip']\n","\n","# Visualiza las primeras 5 filas\n","df_train_inpatient.head()\n","\n","# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","#df_train.info()\n","\n","# Visualiza estadísticas descriptivas de las columnas numéricas\n","#df_train.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RwCwUFmIcgBs","outputId":"4b24416b-8d16-4370-a421-1efddde00ea3","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":20,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 40474 entries, 0 to 40473\n","Data columns (total 30 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   BeneID                  40474 non-null  object \n"," 1   ClaimID                 40474 non-null  object \n"," 2   ClaimStartDt            40474 non-null  object \n"," 3   ClaimEndDt              40474 non-null  object \n"," 4   Provider                40474 non-null  object \n"," 5   InscClaimAmtReimbursed  40474 non-null  int64  \n"," 6   AttendingPhysician      40362 non-null  object \n"," 7   OperatingPhysician      23830 non-null  object \n"," 8   OtherPhysician          4690 non-null   object \n"," 9   AdmissionDt             40474 non-null  object \n"," 10  ClmAdmitDiagnosisCode   40474 non-null  object \n"," 11  DeductibleAmtPaid       39575 non-null  float64\n"," 12  DischargeDt             40474 non-null  object \n"," 13  DiagnosisGroupCode      40474 non-null  object \n"," 14  ClmDiagnosisCode_1      40474 non-null  object \n"," 15  ClmDiagnosisCode_2      40248 non-null  object \n"," 16  ClmDiagnosisCode_3      39798 non-null  object \n"," 17  ClmDiagnosisCode_4      38940 non-null  object \n"," 18  ClmDiagnosisCode_5      37580 non-null  object \n"," 19  ClmDiagnosisCode_6      35636 non-null  object \n"," 20  ClmDiagnosisCode_7      33216 non-null  object \n"," 21  ClmDiagnosisCode_8      30532 non-null  object \n"," 22  ClmDiagnosisCode_9      26977 non-null  object \n"," 23  ClmDiagnosisCode_10     3927 non-null   object \n"," 24  ClmProcedureCode_1      23148 non-null  float64\n"," 25  ClmProcedureCode_2      5454 non-null   float64\n"," 26  ClmProcedureCode_3      965 non-null    float64\n"," 27  ClmProcedureCode_4      116 non-null    float64\n"," 28  ClmProcedureCode_5      9 non-null      float64\n"," 29  ClmProcedureCode_6      0 non-null      float64\n","dtypes: float64(7), int64(1), object(22)\n","memory usage: 9.3+ MB\n"]}],"source":["# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","df_train_inpatient.info()"]},{"cell_type":"markdown","metadata":{"id":"CW60T-lWMJar"},"source":["# Train_Outpatientdata-1542865627584.csv.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"qSwobXW5MMmF","outputId":"bfc3b10a-f2cb-4ade-bb62-986ad853ad2b","executionInfo":{"status":"ok","timestamp":1732833930212,"user_tz":360,"elapsed":17,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      BeneID    ClaimID ClaimStartDt  ClaimEndDt  Provider  \\\n","0  BENE11002  CLM624349   2009-10-11  2009-10-11  PRV56011   \n","1  BENE11003  CLM189947   2009-02-12  2009-02-12  PRV57610   \n","2  BENE11003  CLM438021   2009-06-27  2009-06-27  PRV57595   \n","3  BENE11004  CLM121801   2009-01-06  2009-01-06  PRV56011   \n","4  BENE11004  CLM150998   2009-01-22  2009-01-22  PRV56011   \n","\n","   InscClaimAmtReimbursed AttendingPhysician OperatingPhysician  \\\n","0                      30          PHY326117                NaN   \n","1                      80          PHY362868                NaN   \n","2                      10          PHY328821                NaN   \n","3                      40          PHY334319                NaN   \n","4                     200          PHY403831                NaN   \n","\n","  OtherPhysician ClmDiagnosisCode_1  ... ClmDiagnosisCode_9  \\\n","0            NaN              78943  ...                NaN   \n","1            NaN               6115  ...                NaN   \n","2            NaN               2723  ...                NaN   \n","3            NaN              71988  ...                NaN   \n","4            NaN              82382  ...                NaN   \n","\n","  ClmDiagnosisCode_10 ClmProcedureCode_1 ClmProcedureCode_2  \\\n","0                 NaN                NaN                NaN   \n","1                 NaN                NaN                NaN   \n","2                 NaN                NaN                NaN   \n","3                 NaN                NaN                NaN   \n","4                 NaN                NaN                NaN   \n","\n","  ClmProcedureCode_3 ClmProcedureCode_4 ClmProcedureCode_5 ClmProcedureCode_6  \\\n","0                NaN                NaN                NaN                NaN   \n","1                NaN                NaN                NaN                NaN   \n","2                NaN                NaN                NaN                NaN   \n","3                NaN                NaN                NaN                NaN   \n","4                NaN                NaN                NaN                NaN   \n","\n","  DeductibleAmtPaid  ClmAdmitDiagnosisCode  \n","0                 0                  56409  \n","1                 0                  79380  \n","2                 0                    NaN  \n","3                 0                    NaN  \n","4                 0                  71947  \n","\n","[5 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-31a82b3b-ac6b-4ec5-9c6e-25495c05276c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>BeneID</th>\n","      <th>ClaimID</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>AttendingPhysician</th>\n","      <th>OperatingPhysician</th>\n","      <th>OtherPhysician</th>\n","      <th>ClmDiagnosisCode_1</th>\n","      <th>...</th>\n","      <th>ClmDiagnosisCode_9</th>\n","      <th>ClmDiagnosisCode_10</th>\n","      <th>ClmProcedureCode_1</th>\n","      <th>ClmProcedureCode_2</th>\n","      <th>ClmProcedureCode_3</th>\n","      <th>ClmProcedureCode_4</th>\n","      <th>ClmProcedureCode_5</th>\n","      <th>ClmProcedureCode_6</th>\n","      <th>DeductibleAmtPaid</th>\n","      <th>ClmAdmitDiagnosisCode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BENE11002</td>\n","      <td>CLM624349</td>\n","      <td>2009-10-11</td>\n","      <td>2009-10-11</td>\n","      <td>PRV56011</td>\n","      <td>30</td>\n","      <td>PHY326117</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>78943</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>56409</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BENE11003</td>\n","      <td>CLM189947</td>\n","      <td>2009-02-12</td>\n","      <td>2009-02-12</td>\n","      <td>PRV57610</td>\n","      <td>80</td>\n","      <td>PHY362868</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>6115</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>79380</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BENE11003</td>\n","      <td>CLM438021</td>\n","      <td>2009-06-27</td>\n","      <td>2009-06-27</td>\n","      <td>PRV57595</td>\n","      <td>10</td>\n","      <td>PHY328821</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2723</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BENE11004</td>\n","      <td>CLM121801</td>\n","      <td>2009-01-06</td>\n","      <td>2009-01-06</td>\n","      <td>PRV56011</td>\n","      <td>40</td>\n","      <td>PHY334319</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>71988</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BENE11004</td>\n","      <td>CLM150998</td>\n","      <td>2009-01-22</td>\n","      <td>2009-01-22</td>\n","      <td>PRV56011</td>\n","      <td>200</td>\n","      <td>PHY403831</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>82382</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>71947</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 27 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31a82b3b-ac6b-4ec5-9c6e-25495c05276c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-31a82b3b-ac6b-4ec5-9c6e-25495c05276c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-31a82b3b-ac6b-4ec5-9c6e-25495c05276c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8ba6b03c-2f0c-4a44-b71f-9dfeb396aa2b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ba6b03c-2f0c-4a44-b71f-9dfeb396aa2b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8ba6b03c-2f0c-4a44-b71f-9dfeb396aa2b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":9}],"source":["# Accede al DataFrame 'Train_Outpatientdata-1542865627584.csv.zip'\n","df_train_outpatient = dataframes['Train_Outpatientdata-1542865627584.csv.zip']\n","\n","# Visualiza las primeras 5 filas\n","df_train_outpatient.head()\n","\n","# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","#df_train.info()\n","\n","# Visualiza estadísticas descriptivas de las columnas numéricas\n","#df_train.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iKF2qZ-yclYw","outputId":"53d5c45b-3ae4-4edf-97e8-b67c8c30a3c5","executionInfo":{"status":"ok","timestamp":1732833931106,"user_tz":360,"elapsed":909,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 517737 entries, 0 to 517736\n","Data columns (total 27 columns):\n"," #   Column                  Non-Null Count   Dtype  \n","---  ------                  --------------   -----  \n"," 0   BeneID                  517737 non-null  object \n"," 1   ClaimID                 517737 non-null  object \n"," 2   ClaimStartDt            517737 non-null  object \n"," 3   ClaimEndDt              517737 non-null  object \n"," 4   Provider                517737 non-null  object \n"," 5   InscClaimAmtReimbursed  517737 non-null  int64  \n"," 6   AttendingPhysician      516341 non-null  object \n"," 7   OperatingPhysician      90617 non-null   object \n"," 8   OtherPhysician          195046 non-null  object \n"," 9   ClmDiagnosisCode_1      507284 non-null  object \n"," 10  ClmDiagnosisCode_2      322357 non-null  object \n"," 11  ClmDiagnosisCode_3      203257 non-null  object \n"," 12  ClmDiagnosisCode_4      125596 non-null  object \n"," 13  ClmDiagnosisCode_5      74344 non-null   object \n"," 14  ClmDiagnosisCode_6      48756 non-null   object \n"," 15  ClmDiagnosisCode_7      32961 non-null   object \n"," 16  ClmDiagnosisCode_8      22912 non-null   object \n"," 17  ClmDiagnosisCode_9      14838 non-null   object \n"," 18  ClmDiagnosisCode_10     1083 non-null    object \n"," 19  ClmProcedureCode_1      162 non-null     float64\n"," 20  ClmProcedureCode_2      36 non-null      float64\n"," 21  ClmProcedureCode_3      4 non-null       float64\n"," 22  ClmProcedureCode_4      2 non-null       float64\n"," 23  ClmProcedureCode_5      0 non-null       float64\n"," 24  ClmProcedureCode_6      0 non-null       float64\n"," 25  DeductibleAmtPaid       517737 non-null  int64  \n"," 26  ClmAdmitDiagnosisCode   105425 non-null  object \n","dtypes: float64(6), int64(2), object(19)\n","memory usage: 106.7+ MB\n"]}],"source":["# Visualiza información general del DataFrame (tipos de datos, valores no nulos, etc.)\n","df_train_outpatient.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zAgXuhlEj_ht"},"outputs":[],"source":["# DataFrames auxiliares con las columnas especificadas\n","df_target = df_train_target[['Provider', 'PotentialFraud']]\n","df_beneficiary = df_train_beneficiary[['BeneID', 'DOB', 'DOD', 'Gender', 'Race', 'RenalDiseaseIndicator', 'State', 'County', 'NoOfMonths_PartACov', 'NoOfMonths_PartBCov', 'ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease', 'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression', 'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis', 'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke', 'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt', 'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt']]\n","df_inpatient = df_train_inpatient[['BeneID', 'ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid', 'ClmAdmitDiagnosisCode', 'DiagnosisGroupCode', 'ClaimStartDt', 'ClaimEndDt', 'AdmissionDt', 'DischargeDt']]\n","df_outpatient = df_train_outpatient[['BeneID', 'ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid', 'ClaimStartDt', 'ClaimEndDt']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l92CIKA_kDk-"},"outputs":[],"source":["# Combinar inpatient y outpatient\n","df_claims = pd.concat([df_inpatient, df_outpatient])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bgUf0iz1kFjt"},"outputs":[],"source":["# Combinar con información del beneficiario y el target\n","df_final = pd.merge(df_claims, df_target, on='Provider', how='left')\n","df_final = pd.merge(df_final, df_beneficiary, on='BeneID', how='left')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LUk_XIIpkH1x"},"outputs":[],"source":["# Eliminar la columna BeneID\n","df_final = df_final.drop('BeneID', axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"ORLbOhWFlWMR","outputId":"cdff108d-d6dc-438c-83ef-154b0a58296c","executionInfo":{"status":"ok","timestamp":1732833932638,"user_tz":360,"elapsed":239,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    ClaimID  Provider  InscClaimAmtReimbursed  DeductibleAmtPaid  \\\n","0  CLM46614  PRV55912                   26000             1068.0   \n","1  CLM66048  PRV55907                    5000             1068.0   \n","2  CLM68358  PRV56046                    5000             1068.0   \n","3  CLM38412  PRV52405                    5000             1068.0   \n","4  CLM63689  PRV56614                   10000             1068.0   \n","\n","  ClmAdmitDiagnosisCode DiagnosisGroupCode ClaimStartDt  ClaimEndDt  \\\n","0                  7866                201   2009-04-12  2009-04-18   \n","1                  6186                750   2009-08-31  2009-09-02   \n","2                 29590                883   2009-09-17  2009-09-20   \n","3                   431                067   2009-02-14  2009-02-22   \n","4                 78321                975   2009-08-13  2009-08-30   \n","\n","  AdmissionDt DischargeDt  ... ChronicCond_Depression ChronicCond_Diabetes  \\\n","0  2009-04-12  2009-04-18  ...                      1                    1   \n","1  2009-08-31  2009-09-02  ...                      1                    1   \n","2  2009-09-17  2009-09-20  ...                      1                    1   \n","3  2009-02-14  2009-02-22  ...                      1                    1   \n","4  2009-08-13  2009-08-30  ...                      1                    2   \n","\n","  ChronicCond_IschemicHeart  ChronicCond_Osteoporasis  \\\n","0                         1                         2   \n","1                         1                         2   \n","2                         1                         2   \n","3                         2                         2   \n","4                         1                         2   \n","\n","   ChronicCond_rheumatoidarthritis ChronicCond_stroke  \\\n","0                                1                  1   \n","1                                1                  1   \n","2                                1                  1   \n","3                                1                  1   \n","4                                2                  2   \n","\n","   IPAnnualReimbursementAmt  IPAnnualDeductibleAmt  OPAnnualReimbursementAmt  \\\n","0                     36000                   3204                        60   \n","1                     36000                   3204                        60   \n","2                     36000                   3204                        60   \n","3                      5000                   1068                       250   \n","4                     21260                   2136                       120   \n","\n","   OPAnnualDeductibleAmt  \n","0                     70  \n","1                     70  \n","2                     70  \n","3                    320  \n","4                    100  \n","\n","[5 rows x 35 columns]"],"text/html":["\n","  <div id=\"df-ee9d5040-9ab9-43fc-987a-2f61d3db225b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClaimID</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>DeductibleAmtPaid</th>\n","      <th>ClmAdmitDiagnosisCode</th>\n","      <th>DiagnosisGroupCode</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>AdmissionDt</th>\n","      <th>DischargeDt</th>\n","      <th>...</th>\n","      <th>ChronicCond_Depression</th>\n","      <th>ChronicCond_Diabetes</th>\n","      <th>ChronicCond_IschemicHeart</th>\n","      <th>ChronicCond_Osteoporasis</th>\n","      <th>ChronicCond_rheumatoidarthritis</th>\n","      <th>ChronicCond_stroke</th>\n","      <th>IPAnnualReimbursementAmt</th>\n","      <th>IPAnnualDeductibleAmt</th>\n","      <th>OPAnnualReimbursementAmt</th>\n","      <th>OPAnnualDeductibleAmt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CLM46614</td>\n","      <td>PRV55912</td>\n","      <td>26000</td>\n","      <td>1068.0</td>\n","      <td>7866</td>\n","      <td>201</td>\n","      <td>2009-04-12</td>\n","      <td>2009-04-18</td>\n","      <td>2009-04-12</td>\n","      <td>2009-04-18</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36000</td>\n","      <td>3204</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CLM66048</td>\n","      <td>PRV55907</td>\n","      <td>5000</td>\n","      <td>1068.0</td>\n","      <td>6186</td>\n","      <td>750</td>\n","      <td>2009-08-31</td>\n","      <td>2009-09-02</td>\n","      <td>2009-08-31</td>\n","      <td>2009-09-02</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36000</td>\n","      <td>3204</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CLM68358</td>\n","      <td>PRV56046</td>\n","      <td>5000</td>\n","      <td>1068.0</td>\n","      <td>29590</td>\n","      <td>883</td>\n","      <td>2009-09-17</td>\n","      <td>2009-09-20</td>\n","      <td>2009-09-17</td>\n","      <td>2009-09-20</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36000</td>\n","      <td>3204</td>\n","      <td>60</td>\n","      <td>70</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CLM38412</td>\n","      <td>PRV52405</td>\n","      <td>5000</td>\n","      <td>1068.0</td>\n","      <td>431</td>\n","      <td>067</td>\n","      <td>2009-02-14</td>\n","      <td>2009-02-22</td>\n","      <td>2009-02-14</td>\n","      <td>2009-02-22</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5000</td>\n","      <td>1068</td>\n","      <td>250</td>\n","      <td>320</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CLM63689</td>\n","      <td>PRV56614</td>\n","      <td>10000</td>\n","      <td>1068.0</td>\n","      <td>78321</td>\n","      <td>975</td>\n","      <td>2009-08-13</td>\n","      <td>2009-08-30</td>\n","      <td>2009-08-13</td>\n","      <td>2009-08-30</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21260</td>\n","      <td>2136</td>\n","      <td>120</td>\n","      <td>100</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 35 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee9d5040-9ab9-43fc-987a-2f61d3db225b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ee9d5040-9ab9-43fc-987a-2f61d3db225b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ee9d5040-9ab9-43fc-987a-2f61d3db225b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a99a406-12f7-4cfb-ba53-3f8b6d7c462e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a99a406-12f7-4cfb-ba53-3f8b6d7c462e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a99a406-12f7-4cfb-ba53-3f8b6d7c462e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_final"}},"metadata":{},"execution_count":15}],"source":["df_final.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TYLRKXyXlkZh","outputId":"07d639ef-33c2-4233-da84-7480227c870b","executionInfo":{"status":"ok","timestamp":1732833933129,"user_tz":360,"elapsed":497,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 558211 entries, 0 to 558210\n","Data columns (total 35 columns):\n"," #   Column                           Non-Null Count   Dtype  \n","---  ------                           --------------   -----  \n"," 0   ClaimID                          558211 non-null  object \n"," 1   Provider                         558211 non-null  object \n"," 2   InscClaimAmtReimbursed           558211 non-null  int64  \n"," 3   DeductibleAmtPaid                557312 non-null  float64\n"," 4   ClmAdmitDiagnosisCode            40474 non-null   object \n"," 5   DiagnosisGroupCode               40474 non-null   object \n"," 6   ClaimStartDt                     558211 non-null  object \n"," 7   ClaimEndDt                       558211 non-null  object \n"," 8   AdmissionDt                      40474 non-null   object \n"," 9   DischargeDt                      40474 non-null   object \n"," 10  PotentialFraud                   558211 non-null  object \n"," 11  DOB                              558211 non-null  object \n"," 12  DOD                              4131 non-null    object \n"," 13  Gender                           558211 non-null  int64  \n"," 14  Race                             558211 non-null  int64  \n"," 15  RenalDiseaseIndicator            558211 non-null  object \n"," 16  State                            558211 non-null  int64  \n"," 17  County                           558211 non-null  int64  \n"," 18  NoOfMonths_PartACov              558211 non-null  int64  \n"," 19  NoOfMonths_PartBCov              558211 non-null  int64  \n"," 20  ChronicCond_Alzheimer            558211 non-null  int64  \n"," 21  ChronicCond_Heartfailure         558211 non-null  int64  \n"," 22  ChronicCond_KidneyDisease        558211 non-null  int64  \n"," 23  ChronicCond_Cancer               558211 non-null  int64  \n"," 24  ChronicCond_ObstrPulmonary       558211 non-null  int64  \n"," 25  ChronicCond_Depression           558211 non-null  int64  \n"," 26  ChronicCond_Diabetes             558211 non-null  int64  \n"," 27  ChronicCond_IschemicHeart        558211 non-null  int64  \n"," 28  ChronicCond_Osteoporasis         558211 non-null  int64  \n"," 29  ChronicCond_rheumatoidarthritis  558211 non-null  int64  \n"," 30  ChronicCond_stroke               558211 non-null  int64  \n"," 31  IPAnnualReimbursementAmt         558211 non-null  int64  \n"," 32  IPAnnualDeductibleAmt            558211 non-null  int64  \n"," 33  OPAnnualReimbursementAmt         558211 non-null  int64  \n"," 34  OPAnnualDeductibleAmt            558211 non-null  int64  \n","dtypes: float64(1), int64(22), object(12)\n","memory usage: 149.1+ MB\n"]}],"source":["df_final.info()"]},{"cell_type":"markdown","metadata":{"id":"T7nnOQv4Go-_"},"source":["# Tests"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ghUPF62LGuFA"},"outputs":[],"source":["# Cargar datos de prueba\n","df_test_target = dataframes['Test-1542969243754.csv']\n","df_test_beneficiary = dataframes['Test_Beneficiarydata-1542969243754.csv.zip']\n","df_test_inpatient = dataframes['Test_Inpatientdata-1542969243754.csv.zip']\n","df_test_outpatient = dataframes['Test_Outpatientdata-1542969243754.csv.zip']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"kufwzG2nIPKA","outputId":"230a1117-10b5-42b4-ddb8-50ddfd372d6f","executionInfo":{"status":"ok","timestamp":1732833933129,"user_tz":360,"elapsed":15,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Provider\n","0  PRV51002\n","1  PRV51006\n","2  PRV51009\n","3  PRV51010\n","4  PRV51018"],"text/html":["\n","  <div id=\"df-0e241cb3-9991-45c9-845d-0679b7afa04f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Provider</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PRV51002</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PRV51006</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PRV51009</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PRV51010</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PRV51018</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e241cb3-9991-45c9-845d-0679b7afa04f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e241cb3-9991-45c9-845d-0679b7afa04f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e241cb3-9991-45c9-845d-0679b7afa04f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9d7ba0b5-6c8b-4529-bf4b-8e3d8f48c4df\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d7ba0b5-6c8b-4529-bf4b-8e3d8f48c4df')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9d7ba0b5-6c8b-4529-bf4b-8e3d8f48c4df button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_test_target","summary":"{\n  \"name\": \"df_test_target\",\n  \"rows\": 1353,\n  \"fields\": [\n    {\n      \"column\": \"Provider\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1353,\n        \"samples\": [\n          \"PRV51208\",\n          \"PRV54243\",\n          \"PRV56155\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}],"source":["df_test_target.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T8TotBp5HDEb"},"outputs":[],"source":["# DataFrames auxiliares con las columnas especificadas\n","df_target_test = df_test_target[['Provider']]\n","df_beneficiary_test = df_test_beneficiary[['BeneID', 'DOB', 'DOD', 'Gender', 'Race', 'RenalDiseaseIndicator', 'State', 'County', 'NoOfMonths_PartACov', 'NoOfMonths_PartBCov', 'ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease', 'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression', 'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis', 'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke', 'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt', 'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt']]\n","df_inpatient_test = df_test_inpatient[['BeneID', 'ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid', 'ClmAdmitDiagnosisCode', 'DiagnosisGroupCode', 'ClaimStartDt', 'ClaimEndDt', 'AdmissionDt', 'DischargeDt']]\n","df_outpatient_test = df_test_outpatient[['BeneID', 'ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid', 'ClaimStartDt', 'ClaimEndDt']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vDbugliZHV6w"},"outputs":[],"source":["# Combinar inpatient y outpatient\n","df_claims_test = pd.concat([df_inpatient_test, df_outpatient_test])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z1J9svH6Hk7u"},"outputs":[],"source":["# Combinar con información del beneficiario y el target\n","df_final_test = pd.merge(df_claims_test, df_target_test, on='Provider', how='left')\n","df_final_test = pd.merge(df_final_test, df_beneficiary_test, on='BeneID', how='left')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mAHjJD6IH7D8"},"outputs":[],"source":["# Eliminar la columna BeneID\n","df_final_test = df_final_test.drop('BeneID', axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"vhkpoJF1I9HV","outputId":"f69af31b-51b4-4c2c-bcec-9a84bf7540af","executionInfo":{"status":"ok","timestamp":1732833933130,"user_tz":360,"elapsed":11,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    ClaimID  Provider  InscClaimAmtReimbursed  DeductibleAmtPaid  \\\n","0  CLM67387  PRV57070                    9000             1068.0   \n","1  CLM31237  PRV54750                   14000             1068.0   \n","2  CLM78930  PRV53758                    2000             1068.0   \n","3  CLM56810  PRV55825                   16000             1068.0   \n","4  CLM34625  PRV52338                   19000             1068.0   \n","\n","  ClmAdmitDiagnosisCode DiagnosisGroupCode ClaimStartDt  ClaimEndDt  \\\n","0                  5789                332   2009-09-09  2009-09-16   \n","1                  5939                661   2008-12-25  2009-01-08   \n","2                  4019                241   2009-12-09  2009-12-13   \n","3                  8208                564   2009-06-23  2009-07-06   \n","4                  4279                880   2009-01-20  2009-01-31   \n","\n","  AdmissionDt DischargeDt  ... ChronicCond_Depression ChronicCond_Diabetes  \\\n","0  2009-09-09  2009-09-16  ...                      1                    2   \n","1  2008-12-25  2009-01-08  ...                      2                    1   \n","2  2009-12-09  2009-12-13  ...                      2                    2   \n","3  2009-06-23  2009-07-06  ...                      2                    2   \n","4  2009-01-20  2009-01-31  ...                      1                    1   \n","\n","   ChronicCond_IschemicHeart  ChronicCond_Osteoporasis  \\\n","0                          1                         2   \n","1                          1                         2   \n","2                          1                         2   \n","3                          1                         1   \n","4                          1                         1   \n","\n","  ChronicCond_rheumatoidarthritis  ChronicCond_stroke  \\\n","0                               2                   2   \n","1                               1                   1   \n","2                               2                   2   \n","3                               2                   2   \n","4                               2                   2   \n","\n","   IPAnnualReimbursementAmt  IPAnnualDeductibleAmt  OPAnnualReimbursementAmt  \\\n","0                     21260                   2136                       120   \n","1                     22000                   2136                      1400   \n","2                      2000                   1068                         0   \n","3                     23650                   2136                        40   \n","4                     19000                   1068                      1670   \n","\n","   OPAnnualDeductibleAmt  \n","0                    100  \n","1                    840  \n","2                      0  \n","3                      0  \n","4                    520  \n","\n","[5 rows x 34 columns]"],"text/html":["\n","  <div id=\"df-45b7538b-5912-4fdd-911d-7200518d4968\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClaimID</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>DeductibleAmtPaid</th>\n","      <th>ClmAdmitDiagnosisCode</th>\n","      <th>DiagnosisGroupCode</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>AdmissionDt</th>\n","      <th>DischargeDt</th>\n","      <th>...</th>\n","      <th>ChronicCond_Depression</th>\n","      <th>ChronicCond_Diabetes</th>\n","      <th>ChronicCond_IschemicHeart</th>\n","      <th>ChronicCond_Osteoporasis</th>\n","      <th>ChronicCond_rheumatoidarthritis</th>\n","      <th>ChronicCond_stroke</th>\n","      <th>IPAnnualReimbursementAmt</th>\n","      <th>IPAnnualDeductibleAmt</th>\n","      <th>OPAnnualReimbursementAmt</th>\n","      <th>OPAnnualDeductibleAmt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CLM67387</td>\n","      <td>PRV57070</td>\n","      <td>9000</td>\n","      <td>1068.0</td>\n","      <td>5789</td>\n","      <td>332</td>\n","      <td>2009-09-09</td>\n","      <td>2009-09-16</td>\n","      <td>2009-09-09</td>\n","      <td>2009-09-16</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21260</td>\n","      <td>2136</td>\n","      <td>120</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CLM31237</td>\n","      <td>PRV54750</td>\n","      <td>14000</td>\n","      <td>1068.0</td>\n","      <td>5939</td>\n","      <td>661</td>\n","      <td>2008-12-25</td>\n","      <td>2009-01-08</td>\n","      <td>2008-12-25</td>\n","      <td>2009-01-08</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>22000</td>\n","      <td>2136</td>\n","      <td>1400</td>\n","      <td>840</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CLM78930</td>\n","      <td>PRV53758</td>\n","      <td>2000</td>\n","      <td>1068.0</td>\n","      <td>4019</td>\n","      <td>241</td>\n","      <td>2009-12-09</td>\n","      <td>2009-12-13</td>\n","      <td>2009-12-09</td>\n","      <td>2009-12-13</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2000</td>\n","      <td>1068</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CLM56810</td>\n","      <td>PRV55825</td>\n","      <td>16000</td>\n","      <td>1068.0</td>\n","      <td>8208</td>\n","      <td>564</td>\n","      <td>2009-06-23</td>\n","      <td>2009-07-06</td>\n","      <td>2009-06-23</td>\n","      <td>2009-07-06</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>23650</td>\n","      <td>2136</td>\n","      <td>40</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CLM34625</td>\n","      <td>PRV52338</td>\n","      <td>19000</td>\n","      <td>1068.0</td>\n","      <td>4279</td>\n","      <td>880</td>\n","      <td>2009-01-20</td>\n","      <td>2009-01-31</td>\n","      <td>2009-01-20</td>\n","      <td>2009-01-31</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>19000</td>\n","      <td>1068</td>\n","      <td>1670</td>\n","      <td>520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 34 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45b7538b-5912-4fdd-911d-7200518d4968')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-45b7538b-5912-4fdd-911d-7200518d4968 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-45b7538b-5912-4fdd-911d-7200518d4968');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e1a81b7d-6e17-41c9-be2d-c4dd8feb4fcd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1a81b7d-6e17-41c9-be2d-c4dd8feb4fcd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e1a81b7d-6e17-41c9-be2d-c4dd8feb4fcd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_final_test"}},"metadata":{},"execution_count":23}],"source":["df_final_test.head()"]},{"cell_type":"code","source":["# --- Balanceo de clases con undersampling ---\n","from imblearn.under_sampling import RandomUnderSampler\n","\n","# Define X and y using your training data (df_final)\n","X = df_final.drop('PotentialFraud', axis=1)  # Features\n","y = df_final['PotentialFraud']  # Target variable\n","\n","undersampler = RandomUnderSampler(random_state=42)\n","X_resampled, y_resampled = undersampler.fit_resample(X, y)\n","\n","X = X_resampled  # Actualiza X con los datos balanceados\n","y = y_resampled  # Actualiza y con los datos balanceados\n","\n","# Verificar la cantidad de muestras después del balanceo\n","print(pd.Series(y_resampled).value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_k7MFFnbYtnZ","executionInfo":{"status":"ok","timestamp":1732833938457,"user_tz":360,"elapsed":4995,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"6c0993ec-048f-4680-9952-34bbaf0d8b5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PotentialFraud\n","No     212796\n","Yes    212796\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"QtVD6Qr6nPaz"},"source":["# Random Forest"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9PilsnkOK0tD"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OneHotEncoder"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4EGmykf5K9bb"},"outputs":[],"source":["# --- Preprocesamiento del conjunto de entrenamiento (df_final) ---\n","# --- 1. Reducir cardinalidad (antes de la imputación) ---\n","def reduce_cardinality(df, column, threshold):\n","    if column != 'PotentialFraud':\n","        df[column] = df[column].fillna('Unknown')\n","    counts = df[column].value_counts()\n","    df[column] = df[column].apply(lambda x: x if counts[x] >= threshold else 'Other')\n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7OfnASucLA4v"},"outputs":[],"source":["# --- 2. Imputación ---\n","def impute_data(df):\n","    numerical_cols = df.select_dtypes(include=['number']).columns\n","    categorical_cols = df.select_dtypes(include=['object']).columns\n","\n","    num_imputer = SimpleImputer(strategy='mean')\n","    df[numerical_cols] = num_imputer.fit_transform(df[numerical_cols])\n","\n","    cat_imputer = SimpleImputer(strategy='constant', fill_value='Unknown')\n","    df[categorical_cols] = cat_imputer.fit_transform(df[categorical_cols])\n","\n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M624uxjJLEBc"},"outputs":[],"source":["# --- 3. Codificación One-Hot ---\n","def encode_data(df_train, df_test):\n","    categorical_cols = df_train.select_dtypes(include=['object']).columns\n","\n","    encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n","    encoded_data_train = encoder.fit_transform(df_train[categorical_cols])\n","    encoded_data_test = encoder.transform(df_test[categorical_cols])\n","\n","    encoded_df_train = pd.DataFrame(encoded_data_train, columns=encoder.get_feature_names_out(categorical_cols))\n","    encoded_df_test = pd.DataFrame(encoded_data_test, columns=encoder.get_feature_names_out(categorical_cols))\n","\n","    df_train = pd.concat([df_train, encoded_df_train], axis=1)\n","    df_test = pd.concat([df_test, encoded_df_test], axis=1)\n","\n","    df_train = df_train.drop(categorical_cols, axis=1)\n","    df_test = df_test.drop(categorical_cols, axis=1)\n","\n","    return df_train, df_test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pKJJIe9KLGWA"},"outputs":[],"source":["# --- Aplicar preprocesamiento ---\n","def frequency_encoding(df_train, df_test, columns):\n","    for col in columns:\n","        # Calculate frequency in training data\n","        frequencies = df_train[col].value_counts(normalize=True)\n","\n","        # Apply frequency encoding to both train and test data\n","        df_train[col] = df_train[col].map(frequencies)\n","        df_test[col] = df_test[col].map(frequencies).fillna(0)  # Handle unseen values in test data\n","\n","    return df_train, df_test\n","\n","categorical_cols_initial = df_final.select_dtypes(include=['object']).columns\n","\n","# Exclude 'PotentialFraud' from the loop if it's in the list\n","categorical_cols_to_process = [col for col in categorical_cols_initial if col != 'PotentialFraud']\n","\n","for col in categorical_cols_to_process:\n","    df_final = reduce_cardinality(df_final, col, threshold=10)\n","    df_final_test = reduce_cardinality(df_final_test, col, threshold=10)\n","\n","df_final = impute_data(df_final)\n","df_final_test = impute_data(df_final_test)\n","\n","df_final, df_final_test = frequency_encoding(df_final, df_final_test, categorical_cols_to_process)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IDednhVPTxFd","executionInfo":{"status":"ok","timestamp":1732834036655,"user_tz":360,"elapsed":69257,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0528f1af-b394-445f-a11c-bf7bac2113ca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8448895138969752\n","              precision    recall  f1-score   support\n","\n","          No       0.81      0.98      0.89     68983\n","         Yes       0.95      0.62      0.75     42660\n","\n","    accuracy                           0.84    111643\n","   macro avg       0.88      0.80      0.82    111643\n","weighted avg       0.86      0.84      0.84    111643\n","\n"]}],"source":["# --- Entrenamiento y predicción ---\n","X = df_final.drop('PotentialFraud', axis=1)\n","y = df_final['PotentialFraud']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)\n","model.fit(X_train, y_train)\n","\n","y_pred = model.predict(X_test)\n","print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score"],"metadata":{"id":"6vdK76h156_R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Random Forest:\n","y_pred_rf = model.predict(X_test)\n","cm_rf = confusion_matrix(y_test, y_pred_rf)\n","print(\"Matriz de confusión (Random Forest):\\n\", cm_rf)\n","\n","# Random Forest:\n","precision_rf = precision_score(y_test, y_pred_rf, pos_label='Yes') # Set pos_label to 'Yes'\n","recall_rf = recall_score(y_test, y_pred_rf, pos_label='Yes')       # Set pos_label to 'Yes'\n","f1_rf = f1_score(y_test, y_pred_rf, pos_label='Yes')             # Set pos_label to 'Yes'\n","auc_rf = roc_auc_score(y_test, [1 if x == 'Yes' else 0 for x in y_pred_rf])\n","\n","print(\"\\nMétricas (Random Forest):\")\n","print(\"Precisión:\", precision_rf)\n","print(\"Recuperación:\", recall_rf)\n","print(\"Puntuación F1:\", f1_rf)\n","print(\"AUC:\", auc_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05NqWoEk58cc","executionInfo":{"status":"ok","timestamp":1732834043848,"user_tz":360,"elapsed":7202,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"d05d8aa1-90a1-4be0-ab98-7f6cf688adc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Matriz de confusión (Random Forest):\n"," [[67685  1298]\n"," [16019 26641]]\n","\n","Métricas (Random Forest):\n","Precisión: 0.9535416442965031\n","Recuperación: 0.6244960150023441\n","Puntuación F1: 0.7547132395642998\n","AUC: 0.8028398924583354\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j_RMVaIKLIwa","executionInfo":{"status":"ok","timestamp":1732834044950,"user_tz":360,"elapsed":1107,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/","height":256},"outputId":"30ece302-1f8b-4fcd-bb24-a9428bdf49ba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ClaimID  Provider  InscClaimAmtReimbursed  DeductibleAmtPaid  \\\n","0      1.0       0.0                  9000.0             1068.0   \n","1      1.0       0.0                 14000.0             1068.0   \n","2      1.0       0.0                  2000.0             1068.0   \n","3      1.0       0.0                 16000.0             1068.0   \n","4      1.0       0.0                 19000.0             1068.0   \n","\n","   ClmAdmitDiagnosisCode  DiagnosisGroupCode  ClaimStartDt  ClaimEndDt  \\\n","0               0.001093            0.000104      0.002737    0.002612   \n","1               0.000091            0.000693      0.000267    0.002698   \n","2               0.000188            0.000192      0.002483    0.002460   \n","3               0.000511            0.000693      0.002841    0.002865   \n","4               0.007006            0.000260      0.002872    0.002947   \n","\n","   AdmissionDt  DischargeDt  ...  ChronicCond_Diabetes  \\\n","0     0.000204     0.000168  ...                   2.0   \n","1     0.000136     0.000204  ...                   1.0   \n","2     0.000208     0.000179  ...                   2.0   \n","3     0.000190     0.000195  ...                   2.0   \n","4     0.000238     0.000193  ...                   1.0   \n","\n","   ChronicCond_IschemicHeart  ChronicCond_Osteoporasis  \\\n","0                        1.0                       2.0   \n","1                        1.0                       2.0   \n","2                        1.0                       2.0   \n","3                        1.0                       1.0   \n","4                        1.0                       1.0   \n","\n","   ChronicCond_rheumatoidarthritis  ChronicCond_stroke  \\\n","0                              2.0                 2.0   \n","1                              1.0                 1.0   \n","2                              2.0                 2.0   \n","3                              2.0                 2.0   \n","4                              2.0                 2.0   \n","\n","   IPAnnualReimbursementAmt  IPAnnualDeductibleAmt  OPAnnualReimbursementAmt  \\\n","0                   21260.0                 2136.0                     120.0   \n","1                   22000.0                 2136.0                    1400.0   \n","2                    2000.0                 1068.0                       0.0   \n","3                   23650.0                 2136.0                      40.0   \n","4                   19000.0                 1068.0                    1670.0   \n","\n","   OPAnnualDeductibleAmt  PotentialFraud_Prediction  \n","0                  100.0                         No  \n","1                  840.0                         No  \n","2                    0.0                         No  \n","3                    0.0                         No  \n","4                  520.0                         No  \n","\n","[5 rows x 35 columns]"],"text/html":["\n","  <div id=\"df-92b5327e-a804-41af-be9a-0dcae5cf6645\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClaimID</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>DeductibleAmtPaid</th>\n","      <th>ClmAdmitDiagnosisCode</th>\n","      <th>DiagnosisGroupCode</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>AdmissionDt</th>\n","      <th>DischargeDt</th>\n","      <th>...</th>\n","      <th>ChronicCond_Diabetes</th>\n","      <th>ChronicCond_IschemicHeart</th>\n","      <th>ChronicCond_Osteoporasis</th>\n","      <th>ChronicCond_rheumatoidarthritis</th>\n","      <th>ChronicCond_stroke</th>\n","      <th>IPAnnualReimbursementAmt</th>\n","      <th>IPAnnualDeductibleAmt</th>\n","      <th>OPAnnualReimbursementAmt</th>\n","      <th>OPAnnualDeductibleAmt</th>\n","      <th>PotentialFraud_Prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>9000.0</td>\n","      <td>1068.0</td>\n","      <td>0.001093</td>\n","      <td>0.000104</td>\n","      <td>0.002737</td>\n","      <td>0.002612</td>\n","      <td>0.000204</td>\n","      <td>0.000168</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>21260.0</td>\n","      <td>2136.0</td>\n","      <td>120.0</td>\n","      <td>100.0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>14000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000091</td>\n","      <td>0.000693</td>\n","      <td>0.000267</td>\n","      <td>0.002698</td>\n","      <td>0.000136</td>\n","      <td>0.000204</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>22000.0</td>\n","      <td>2136.0</td>\n","      <td>1400.0</td>\n","      <td>840.0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000188</td>\n","      <td>0.000192</td>\n","      <td>0.002483</td>\n","      <td>0.002460</td>\n","      <td>0.000208</td>\n","      <td>0.000179</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2000.0</td>\n","      <td>1068.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>16000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000511</td>\n","      <td>0.000693</td>\n","      <td>0.002841</td>\n","      <td>0.002865</td>\n","      <td>0.000190</td>\n","      <td>0.000195</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>23650.0</td>\n","      <td>2136.0</td>\n","      <td>40.0</td>\n","      <td>0.0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>19000.0</td>\n","      <td>1068.0</td>\n","      <td>0.007006</td>\n","      <td>0.000260</td>\n","      <td>0.002872</td>\n","      <td>0.002947</td>\n","      <td>0.000238</td>\n","      <td>0.000193</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>19000.0</td>\n","      <td>1068.0</td>\n","      <td>1670.0</td>\n","      <td>520.0</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 35 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92b5327e-a804-41af-be9a-0dcae5cf6645')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-92b5327e-a804-41af-be9a-0dcae5cf6645 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-92b5327e-a804-41af-be9a-0dcae5cf6645');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-babbbade-7c58-477a-bc85-3072670fdbba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-babbbade-7c58-477a-bc85-3072670fdbba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-babbbade-7c58-477a-bc85-3072670fdbba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_final_test"}},"metadata":{},"execution_count":33}],"source":["# --- Predicciones en el conjunto de prueba final (df_final_test) ---\n","# Asegúrate de que df_final_test tenga las mismas columnas que X_train/X_test\n","predictions = model.predict(df_final_test)\n","\n","# Agrega las predicciones a df_final_test o crea un nuevo DataFrame\n","df_final_test['PotentialFraud_Prediction'] = predictions\n","df_final_test.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z8CZUnn1OqCu","executionInfo":{"status":"ok","timestamp":1732834044950,"user_tz":360,"elapsed":7,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5556842c-63de-40ba-e220-58651d53e63c"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            feature  importance\n","1                          Provider    0.873640\n","15                            State    0.033849\n","16                           County    0.026593\n","8                       AdmissionDt    0.010938\n","9                       DischargeDt    0.010440\n","4             ClmAdmitDiagnosisCode    0.010212\n","5                DiagnosisGroupCode    0.008128\n","3                 DeductibleAmtPaid    0.006187\n","2            InscClaimAmtReimbursed    0.005411\n","32         OPAnnualReimbursementAmt    0.001971\n","33            OPAnnualDeductibleAmt    0.001756\n","10                              DOB    0.001739\n","30         IPAnnualReimbursementAmt    0.001613\n","13                             Race    0.001327\n","31            IPAnnualDeductibleAmt    0.001242\n","6                      ClaimStartDt    0.001130\n","7                        ClaimEndDt    0.001124\n","24           ChronicCond_Depression    0.000222\n","12                           Gender    0.000207\n","23       ChronicCond_ObstrPulmonary    0.000197\n","27         ChronicCond_Osteoporasis    0.000194\n","14            RenalDiseaseIndicator    0.000184\n","20         ChronicCond_Heartfailure    0.000184\n","28  ChronicCond_rheumatoidarthritis    0.000183\n","19            ChronicCond_Alzheimer    0.000179\n","29               ChronicCond_stroke    0.000176\n","26        ChronicCond_IschemicHeart    0.000166\n","21        ChronicCond_KidneyDisease    0.000162\n","11                              DOD    0.000152\n","22               ChronicCond_Cancer    0.000150\n","25             ChronicCond_Diabetes    0.000138\n","18              NoOfMonths_PartBCov    0.000107\n","17              NoOfMonths_PartACov    0.000098\n","0                           ClaimID    0.000000\n"]}],"source":["importances = model.feature_importances_\n","feature_names = X.columns\n","feature_importances = pd.DataFrame({'feature': feature_names, 'importance': importances})\n","print(feature_importances.sort_values('importance', ascending=False))"]},{"cell_type":"markdown","metadata":{"id":"NHlpT56FCe9e"},"source":["# XGboost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gDt-YO1VMWE2","executionInfo":{"status":"ok","timestamp":1732834063776,"user_tz":360,"elapsed":18832,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b27d8399-186f-4a94-8128-3a0cb60d9737"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting xgboost==1.7.5\n","  Downloading xgboost-1.7.5-py3-none-manylinux2014_x86_64.whl.metadata (1.9 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost==1.7.5) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost==1.7.5) (1.13.1)\n","Downloading xgboost-1.7.5-py3-none-manylinux2014_x86_64.whl (200.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m200.3/200.3 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xgboost\n","  Attempting uninstall: xgboost\n","    Found existing installation: xgboost 2.1.2\n","    Uninstalling xgboost-2.1.2:\n","      Successfully uninstalled xgboost-2.1.2\n","Successfully installed xgboost-1.7.5\n"]}],"source":["!pip install xgboost==1.7.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DEk9gpSUMXTI"},"outputs":[],"source":["import xgboost as xgb\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZkqOxZBTMYgI"},"outputs":[],"source":["X = df_final.drop('PotentialFraud', axis=1)\n","y = df_final['PotentialFraud']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dfVcMOrIMdSs"},"outputs":[],"source":["# Before creating DMatrix, convert 'PotentialFraud' to numeric:\n","y_train = y_train.map({'No': 0, 'Yes': 1}) # Assuming 'No' and 'Yes' are the values\n","y_test = y_test.map({'No': 0, 'Yes': 1})\n","\n","# Create DMatrix for XGBoost\n","dtrain = xgb.DMatrix(X_train, label=y_train)\n","dtest = xgb.DMatrix(X_test, label=y_test)\n","\n","# Define parameters\n","params = {\n","    'objective': 'binary:logistic',  # For binary classification\n","    'eval_metric': 'logloss',\n","    'max_depth': 3,\n","    'eta': 0.1,\n","}\n","\n","# Train the model\n","model = xgb.train(params, dtrain, num_boost_round=100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6raek04PMe9_","executionInfo":{"status":"ok","timestamp":1732834135351,"user_tz":360,"elapsed":875,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4ab9d2b7-d589-490f-bdf2-6af206106f46"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8731134061248802\n","              precision    recall  f1-score   support\n","\n","           0       0.85      0.97      0.90     68983\n","           1       0.94      0.71      0.81     42660\n","\n","    accuracy                           0.87    111643\n","   macro avg       0.89      0.84      0.86    111643\n","weighted avg       0.88      0.87      0.87    111643\n","\n"]}],"source":["y_pred = model.predict(dtest)\n","y_pred_binary = [1 if p >= 0.5 else 0 for p in y_pred]  # Convert probabilities to 0/1\n","\n","accuracy = accuracy_score(y_test, y_pred_binary)\n","print(f\"Accuracy: {accuracy}\")\n","print(classification_report(y_test, y_pred_binary))"]},{"cell_type":"code","source":["# XGBoost:\n","y_pred_xgb = model.predict(dtest)\n","y_pred_xgb_binary = [1 if p >= 0.5 else 0 for p in y_pred_xgb]\n","cm_xgb = confusion_matrix(y_test, y_pred_xgb_binary)\n","print(\"Matriz de confusión (XGBoost):\\n\", cm_xgb)\n","\n","# XGBoost:\n","precision_xgb = precision_score(y_test, y_pred_xgb_binary)\n","recall_xgb = recall_score(y_test, y_pred_xgb_binary)\n","f1_xgb = f1_score(y_test, y_pred_xgb_binary)\n","auc_xgb = roc_auc_score(y_test, y_pred_xgb)\n","\n","print(\"\\nMétricas (XGBoost):\")\n","print(\"Precisión:\", precision_xgb)\n","print(\"Recuperación:\", recall_xgb)\n","print(\"Puntuación F1:\", f1_xgb)\n","print(\"AUC:\", auc_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WfadoCW6UUA","executionInfo":{"status":"ok","timestamp":1732834137822,"user_tz":360,"elapsed":2481,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"outputId":"d854963c-1fb4-4e2b-aa4b-8e2387b3b96e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Matriz de confusión (XGBoost):\n"," [[67061  1922]\n"," [12244 30416]]\n","\n","Métricas (XGBoost):\n","Precisión: 0.9405652792380481\n","Recuperación: 0.7129864041256446\n","Puntuación F1: 0.8111149630656818\n","AUC: 0.9253845824778684\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0TkHQDD2MgH4","executionInfo":{"status":"ok","timestamp":1732834137822,"user_tz":360,"elapsed":40,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/","height":256},"outputId":"5af9eb48-577c-4c68-99bf-6c227ef9c30c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ClaimID  Provider  InscClaimAmtReimbursed  DeductibleAmtPaid  \\\n","0      1.0       0.0                  9000.0             1068.0   \n","1      1.0       0.0                 14000.0             1068.0   \n","2      1.0       0.0                  2000.0             1068.0   \n","3      1.0       0.0                 16000.0             1068.0   \n","4      1.0       0.0                 19000.0             1068.0   \n","\n","   ClmAdmitDiagnosisCode  DiagnosisGroupCode  ClaimStartDt  ClaimEndDt  \\\n","0               0.001093            0.000104      0.002737    0.002612   \n","1               0.000091            0.000693      0.000267    0.002698   \n","2               0.000188            0.000192      0.002483    0.002460   \n","3               0.000511            0.000693      0.002841    0.002865   \n","4               0.007006            0.000260      0.002872    0.002947   \n","\n","   AdmissionDt  DischargeDt  ...  ChronicCond_IschemicHeart  \\\n","0     0.000204     0.000168  ...                        1.0   \n","1     0.000136     0.000204  ...                        1.0   \n","2     0.000208     0.000179  ...                        1.0   \n","3     0.000190     0.000195  ...                        1.0   \n","4     0.000238     0.000193  ...                        1.0   \n","\n","   ChronicCond_Osteoporasis  ChronicCond_rheumatoidarthritis  \\\n","0                       2.0                              2.0   \n","1                       2.0                              1.0   \n","2                       2.0                              2.0   \n","3                       1.0                              2.0   \n","4                       1.0                              2.0   \n","\n","   ChronicCond_stroke  IPAnnualReimbursementAmt  IPAnnualDeductibleAmt  \\\n","0                 2.0                   21260.0                 2136.0   \n","1                 1.0                   22000.0                 2136.0   \n","2                 2.0                    2000.0                 1068.0   \n","3                 2.0                   23650.0                 2136.0   \n","4                 2.0                   19000.0                 1068.0   \n","\n","   OPAnnualReimbursementAmt  OPAnnualDeductibleAmt  PotentialFraud_Prediction  \\\n","0                     120.0                  100.0                         No   \n","1                    1400.0                  840.0                         No   \n","2                       0.0                    0.0                         No   \n","3                      40.0                    0.0                         No   \n","4                    1670.0                  520.0                         No   \n","\n","   PotentialFraud_Prediction_XGB  \n","0                              0  \n","1                              0  \n","2                              0  \n","3                              0  \n","4                              0  \n","\n","[5 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-3574b411-2e69-44e2-ac6f-154b2bee1899\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClaimID</th>\n","      <th>Provider</th>\n","      <th>InscClaimAmtReimbursed</th>\n","      <th>DeductibleAmtPaid</th>\n","      <th>ClmAdmitDiagnosisCode</th>\n","      <th>DiagnosisGroupCode</th>\n","      <th>ClaimStartDt</th>\n","      <th>ClaimEndDt</th>\n","      <th>AdmissionDt</th>\n","      <th>DischargeDt</th>\n","      <th>...</th>\n","      <th>ChronicCond_IschemicHeart</th>\n","      <th>ChronicCond_Osteoporasis</th>\n","      <th>ChronicCond_rheumatoidarthritis</th>\n","      <th>ChronicCond_stroke</th>\n","      <th>IPAnnualReimbursementAmt</th>\n","      <th>IPAnnualDeductibleAmt</th>\n","      <th>OPAnnualReimbursementAmt</th>\n","      <th>OPAnnualDeductibleAmt</th>\n","      <th>PotentialFraud_Prediction</th>\n","      <th>PotentialFraud_Prediction_XGB</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>9000.0</td>\n","      <td>1068.0</td>\n","      <td>0.001093</td>\n","      <td>0.000104</td>\n","      <td>0.002737</td>\n","      <td>0.002612</td>\n","      <td>0.000204</td>\n","      <td>0.000168</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>21260.0</td>\n","      <td>2136.0</td>\n","      <td>120.0</td>\n","      <td>100.0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>14000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000091</td>\n","      <td>0.000693</td>\n","      <td>0.000267</td>\n","      <td>0.002698</td>\n","      <td>0.000136</td>\n","      <td>0.000204</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>22000.0</td>\n","      <td>2136.0</td>\n","      <td>1400.0</td>\n","      <td>840.0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000188</td>\n","      <td>0.000192</td>\n","      <td>0.002483</td>\n","      <td>0.002460</td>\n","      <td>0.000208</td>\n","      <td>0.000179</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2000.0</td>\n","      <td>1068.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>16000.0</td>\n","      <td>1068.0</td>\n","      <td>0.000511</td>\n","      <td>0.000693</td>\n","      <td>0.002841</td>\n","      <td>0.002865</td>\n","      <td>0.000190</td>\n","      <td>0.000195</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>23650.0</td>\n","      <td>2136.0</td>\n","      <td>40.0</td>\n","      <td>0.0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>19000.0</td>\n","      <td>1068.0</td>\n","      <td>0.007006</td>\n","      <td>0.000260</td>\n","      <td>0.002872</td>\n","      <td>0.002947</td>\n","      <td>0.000238</td>\n","      <td>0.000193</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>19000.0</td>\n","      <td>1068.0</td>\n","      <td>1670.0</td>\n","      <td>520.0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3574b411-2e69-44e2-ac6f-154b2bee1899')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3574b411-2e69-44e2-ac6f-154b2bee1899 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3574b411-2e69-44e2-ac6f-154b2bee1899');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97d2e573-be70-4610-97bb-79197c28e013\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97d2e573-be70-4610-97bb-79197c28e013')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97d2e573-be70-4610-97bb-79197c28e013 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_final_test"}},"metadata":{},"execution_count":41}],"source":["# Select only the relevant features (excluding target and prediction columns)\n","features = [col for col in df_final_test.columns if col not in ['PotentialFraud', 'PotentialFraud_Prediction']]\n","\n","# Create DMatrix using the selected features\n","dtest_final = xgb.DMatrix(df_final_test[features])\n","predictions = model.predict(dtest_final)\n","predictions_binary = [1 if p >= 0.5 else 0 for p in predictions]\n","\n","df_final_test['PotentialFraud_Prediction_XGB'] = predictions_binary\n","df_final_test.head()"]},{"cell_type":"markdown","metadata":{"id":"Jlxw30R8FenT"},"source":["#Reglas Manuales\n","Frecuencia de Tratamientos por Paciente: Si un proveedor tiene una cantidad anormalmente alta de tratamientos administrados por paciente (comparado con otros proveedores), podría ser un indicador de fraude.\n","\n","Reembolsos Totales por Paciente: Un proveedor que obtiene un reembolso total alto por cada paciente (especialmente si el paciente requiere pocos tratamientos) podría ser sospechoso.\n","\n","Distribución de Condiciones Crónicas: Si un proveedor tiene una gran cantidad de pacientes con condiciones crónicas específicas que usualmente requieren tratamientos caros, esto podría ser inusual si se desvía mucho del patrón general."]},{"cell_type":"code","source":["# Calculate the total number of claims per provider\n","total_claims_per_provider = df_final.groupby('Provider')['ClaimID'].count().reset_index(name='TotalClaims')\n","\n","# Assuming each ClaimID represents a treatment\n","avg_treatments_per_provider = total_claims_per_provider.rename(columns={'TotalClaims': 'AvgTreatments'})\n","\n","# Display the result\n","print(avg_treatments_per_provider[['Provider', 'AvgTreatments']])"],"metadata":{"id":"ELIq3z_0F99Z","executionInfo":{"status":"ok","timestamp":1732834137822,"user_tz":360,"elapsed":34,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"97625a4e-1211-42ba-f35a-bc93f84c46b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Provider  AvgTreatments\n","0    0.000018            990\n","1    0.000020            924\n","2    0.000021            912\n","3    0.000023            884\n","4    0.000025            980\n","..        ...            ...\n","579  0.006428           3588\n","580  0.007961           4444\n","581  0.008490           4739\n","582  0.010329           5766\n","583  0.014761           8240\n","\n","[584 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Calculate the total number of claims per provider\n","total_claims_per_provider = df_final.groupby('Provider')['ClaimID'].count().reset_index(name='TotalClaims')\n","\n","# Calculate average treatments per provider (assuming each ClaimID represents a treatment)\n","avg_treatments_per_provider = total_claims_per_provider.rename(columns={'TotalClaims': 'AvgTreatments'})\n","\n","\n","# Sort providers by average treatments and select the top 10\n","top_providers = avg_treatments_per_provider.sort_values('AvgTreatments', ascending=False).head(10)\n","\n","# Create a bar plot to visualize the top providers\n","plt.figure(figsize=(12, 6))\n","sns.barplot(x='Provider', y='AvgTreatments', data=top_providers)\n","plt.title('Top 10 Providers with the Most Treatments')\n","plt.xlabel('Provider')\n","plt.ylabel('Average Number of Treatments')\n","plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability\n","plt.show()"],"metadata":{"id":"mMX4g_wXF_4S","executionInfo":{"status":"ok","timestamp":1732834139417,"user_tz":360,"elapsed":1618,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/","height":639},"outputId":"ed2b0f0c-52bb-4db0-b9b6-ef3f20a24352"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate total reimbursements per provider\n","total_reimbursements_per_provider = df_final.groupby('Provider')['InscClaimAmtReimbursed'].sum().reset_index(name='TotalReimbursements')\n","\n","# Display the result\n","print(total_reimbursements_per_provider[['Provider', 'TotalReimbursements']])"],"metadata":{"id":"zZzkhCB9Lsgn","executionInfo":{"status":"ok","timestamp":1732834139417,"user_tz":360,"elapsed":23,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f76b62b0-133b-4397-aca4-a2d96af0b70b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Provider  TotalReimbursements\n","0    0.000018            2753090.0\n","1    0.000020            1583710.0\n","2    0.000021            1315290.0\n","3    0.000023            2257410.0\n","4    0.000025            2621370.0\n","..        ...                  ...\n","579  0.006428            1014510.0\n","580  0.007961            1281810.0\n","581  0.008490            1303600.0\n","582  0.010329           14726570.0\n","583  0.014761            2321890.0\n","\n","[584 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Sort providers by total reimbursements and select the top 10\n","top_providers = total_reimbursements_per_provider.sort_values('TotalReimbursements', ascending=False).head(10)\n","\n","# Create a bar plot to visualize the top providers\n","plt.figure(figsize=(12, 6))\n","sns.barplot(x='Provider', y='TotalReimbursements', data=top_providers)\n","plt.title('Top 10 Providers with the Highest Total Reimbursements')\n","plt.xlabel('Provider')\n","plt.ylabel('Total Reimbursements')\n","plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability\n","plt.show()"],"metadata":{"id":"FSK-6pIDLuue","executionInfo":{"status":"ok","timestamp":1732834139418,"user_tz":360,"elapsed":20,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/","height":645},"outputId":"5c848f6a-ba69-4edf-93f5-b2798fa1e39d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# For df_final:\n","print(\"Columns in df_final:\")\n","print(df_final.columns)\n","\n","# For df_final_test:\n","print(\"\\nColumns in df_final_test:\")\n","print(df_final_test.columns)"],"metadata":{"id":"DWjOvKQXasBO","executionInfo":{"status":"ok","timestamp":1732834139418,"user_tz":360,"elapsed":17,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"260d3e77-7ba1-415f-ae9e-04798617c904"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Columns in df_final:\n","Index(['ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid',\n","       'ClmAdmitDiagnosisCode', 'DiagnosisGroupCode', 'ClaimStartDt',\n","       'ClaimEndDt', 'AdmissionDt', 'DischargeDt', 'PotentialFraud', 'DOB',\n","       'DOD', 'Gender', 'Race', 'RenalDiseaseIndicator', 'State', 'County',\n","       'NoOfMonths_PartACov', 'NoOfMonths_PartBCov', 'ChronicCond_Alzheimer',\n","       'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease',\n","       'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary',\n","       'ChronicCond_Depression', 'ChronicCond_Diabetes',\n","       'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis',\n","       'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke',\n","       'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt',\n","       'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt'],\n","      dtype='object')\n","\n","Columns in df_final_test:\n","Index(['ClaimID', 'Provider', 'InscClaimAmtReimbursed', 'DeductibleAmtPaid',\n","       'ClmAdmitDiagnosisCode', 'DiagnosisGroupCode', 'ClaimStartDt',\n","       'ClaimEndDt', 'AdmissionDt', 'DischargeDt', 'DOB', 'DOD', 'Gender',\n","       'Race', 'RenalDiseaseIndicator', 'State', 'County',\n","       'NoOfMonths_PartACov', 'NoOfMonths_PartBCov', 'ChronicCond_Alzheimer',\n","       'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease',\n","       'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary',\n","       'ChronicCond_Depression', 'ChronicCond_Diabetes',\n","       'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis',\n","       'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke',\n","       'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt',\n","       'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt',\n","       'PotentialFraud_Prediction', 'PotentialFraud_Prediction_XGB'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["# Assuming 'chronic_cols' should contain the names of columns representing chronic conditions\n","# Replace with the actual column names from your DataFrame\n","chronic_cols = ['ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease',\n","                 'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression',\n","                 'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis',\n","                 'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke']\n","\n","# Calculate average prevalence for each chronic condition across all providers\n","avg_chronic_prevalence = df_final[chronic_cols].mean()\n","print(avg_chronic_prevalence)"],"metadata":{"id":"C0j4FGMbMFTv","executionInfo":{"status":"ok","timestamp":1732834139800,"user_tz":360,"elapsed":394,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bd7e4231-3c50-44b6-dcd4-14b8ea9b77a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ChronicCond_Alzheimer              1.598132\n","ChronicCond_Heartfailure           1.409573\n","ChronicCond_KidneyDisease          1.587998\n","ChronicCond_Cancer                 1.848615\n","ChronicCond_ObstrPulmonary         1.687070\n","ChronicCond_Depression             1.565193\n","ChronicCond_Diabetes               1.294605\n","ChronicCond_IschemicHeart          1.240735\n","ChronicCond_Osteoporasis           1.682353\n","ChronicCond_rheumatoidarthritis    1.688829\n","ChronicCond_stroke                 1.898280\n","dtype: float64\n"]}]},{"cell_type":"code","source":["# Calculate prevalence for each chronic condition per provider\n","chronic_prevalence = df_final.groupby('Provider')[chronic_cols].mean().reset_index()\n","\n","# Calculate deviation from average for each provider and condition\n","for col in chronic_cols:\n","  chronic_prevalence[col + '_Deviation'] = chronic_prevalence[col] - avg_chronic_prevalence[col]\n","\n","# Display the result\n","print(chronic_prevalence[['Provider'] + [col + '_Deviation' for col in chronic_cols]])"],"metadata":{"id":"YtQz_e7tMN99","executionInfo":{"status":"ok","timestamp":1732834139801,"user_tz":360,"elapsed":24,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"40387d10-c2e4-4347-ff79-8c62e5a0666c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Provider  ChronicCond_Alzheimer_Deviation  \\\n","0    0.000018                        -0.016314   \n","1    0.000020                         0.011175   \n","2    0.000021                         0.008227   \n","3    0.000023                        -0.015553   \n","4    0.000025                        -0.000173   \n","..        ...                              ...   \n","579  0.006428                         0.023941   \n","580  0.007961                        -0.002498   \n","581  0.008490                         0.004316   \n","582  0.010329                        -0.010550   \n","583  0.014761                         0.003567   \n","\n","     ChronicCond_Heartfailure_Deviation  ChronicCond_KidneyDisease_Deviation  \\\n","0                             -0.034825                            -0.020321   \n","1                             -0.026456                            -0.045790   \n","2                             -0.012643                             0.022748   \n","3                              0.002192                            -0.025781   \n","4                             -0.008552                            -0.026774   \n","..                                  ...                                  ...   \n","579                           -0.003497                             0.016238   \n","580                           -0.004307                            -0.016891   \n","581                            0.020265                             0.025633   \n","582                           -0.006000                            -0.025563   \n","583                            0.027563                             0.034453   \n","\n","     ChronicCond_Cancer_Deviation  ChronicCond_ObstrPulmonary_Deviation  \\\n","0                       -0.012251                             -0.023434   \n","1                       -0.017446                             -0.043131   \n","2                        0.001166                              0.022360   \n","3                        0.015639                             -0.015124   \n","4                       -0.001676                             -0.051356   \n","..                            ...                                   ...   \n","579                      0.005622                              0.023911   \n","580                     -0.005230                             -0.012002   \n","581                     -0.007509                              0.030803   \n","582                     -0.008517                             -0.019883   \n","583                      0.001143                              0.032348   \n","\n","     ChronicCond_Depression_Deviation  ChronicCond_Diabetes_Deviation  \\\n","0                           -0.035900                       -0.010767   \n","1                           -0.011081                        0.020330   \n","2                            0.017044                        0.015702   \n","3                            0.006074                        0.002906   \n","4                           -0.002948                       -0.017054   \n","..                                ...                             ...   \n","579                          0.026223                        0.011693   \n","580                         -0.010963                        0.002199   \n","581                          0.016997                        0.015165   \n","582                         -0.005706                       -0.002549   \n","583                         -0.001115                        0.003453   \n","\n","     ChronicCond_IschemicHeart_Deviation  ChronicCond_Osteoporasis_Deviation  \\\n","0                              -0.019523                           -0.030838   \n","1                              -0.030778                            0.004876   \n","2                              -0.006086                           -0.008011   \n","3                              -0.021278                           -0.028507   \n","4                              -0.061143                           -0.010925   \n","..                                   ...                                 ...   \n","579                             0.004248                            0.009955   \n","580                             0.016241                           -0.011786   \n","581                             0.017969                            0.019061   \n","582                            -0.006431                            0.002003   \n","583                             0.022129                            0.010487   \n","\n","     ChronicCond_rheumatoidarthritis_Deviation  ChronicCond_stroke_Deviation  \n","0                                    -0.013072                     -0.025553  \n","1                                    -0.015669                     -0.012999  \n","2                                     0.005250                      0.024965  \n","3                                    -0.039508                     -0.035158  \n","4                                    -0.001074                     -0.019709  \n","..                                         ...                           ...  \n","579                                   0.013791                     -0.000845  \n","580                                   0.001540                      0.014411  \n","581                                   0.009630                      0.009928  \n","582                                   0.007668                     -0.001992  \n","583                                   0.006438                      0.003419  \n","\n","[584 rows x 12 columns]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Choose a specific chronic condition to visualize (e.g., 'ChronicCond_Cancer')\n","condition = 'ChronicCond_Cancer'\n","\n","# Sort providers by deviation for the chosen condition and select top 10\n","top_providers = chronic_prevalence.sort_values(condition + '_Deviation', ascending=False).head(10)\n","\n","# Create a bar plot to visualize deviations for the top 10 providers\n","plt.figure(figsize=(12, 6))\n","sns.barplot(x='Provider', y=condition + '_Deviation', data=top_providers)\n","plt.title(f'Top 10 Providers with Highest Deviation from Average Prevalence of {condition}')\n","plt.xlabel('Provider')\n","plt.ylabel('Deviation from Average')\n","plt.xticks(rotation=45, ha='right')\n","plt.show()"],"metadata":{"id":"vQ4cdQmIM5ia","executionInfo":{"status":"ok","timestamp":1732834139801,"user_tz":360,"elapsed":18,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/","height":641},"outputId":"79128aa0-2e89-4b66-8c74-fcb8cc9a5856"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Evaluar si mis reglas manuales hacen correlacion."],"metadata":{"id":"yRCr0OWWqYhi"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","\n","# Crear un objeto MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Ajustar el scaler a los valores de la regla\n","scaler.fit(avg_treatments_per_provider[['AvgTreatments']])\n","\n","# Normalizar los valores de la regla\n","avg_treatments_per_provider['AvgTreatments_Scaled'] = scaler.transform(avg_treatments_per_provider[['AvgTreatments']])"],"metadata":{"id":"pSryZ5AbhyCE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Crear un objeto MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Ajustar el scaler a los valores de la regla\n","scaler.fit(total_reimbursements_per_provider[['TotalReimbursements']])\n","\n","# Normalizar los valores de la regla\n","total_reimbursements_per_provider['TotalReimbursements_Scaled'] = scaler.transform(total_reimbursements_per_provider[['TotalReimbursements']])"],"metadata":{"id":"dqh0BUsBh6W5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scaling chronic_prevalence\n","scaler = MinMaxScaler()\n","deviation_cols = [col for col in chronic_prevalence.columns if col.endswith('_Deviation')]\n","chronic_prevalence[deviation_cols] = scaler.fit_transform(chronic_prevalence[deviation_cols])\n","\n","# Display the scaled data\n","print(chronic_prevalence[['Provider'] + deviation_cols])"],"metadata":{"id":"hed_4z8mmFhx","executionInfo":{"status":"ok","timestamp":1732834139801,"user_tz":360,"elapsed":13,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a8d7232c-2b95-4506-e1ce-65ea8037379d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Provider  ChronicCond_Alzheimer_Deviation  \\\n","0    0.000018                         0.381863   \n","1    0.000020                         0.458090   \n","2    0.000021                         0.449916   \n","3    0.000023                         0.383973   \n","4    0.000025                         0.426622   \n","..        ...                              ...   \n","579  0.006428                         0.493490   \n","580  0.007961                         0.420176   \n","581  0.008490                         0.439068   \n","582  0.010329                         0.397847   \n","583  0.014761                         0.436992   \n","\n","     ChronicCond_Heartfailure_Deviation  ChronicCond_KidneyDisease_Deviation  \\\n","0                              0.350523                             0.471266   \n","1                              0.380586                             0.401795   \n","2                              0.430204                             0.588744   \n","3                              0.483492                             0.456374   \n","4                              0.444897                             0.453666   \n","..                                  ...                                  ...   \n","579                            0.463057                             0.570988   \n","580                            0.460146                             0.480623   \n","581                            0.548411                             0.596616   \n","582                            0.454065                             0.456968   \n","583                            0.574627                             0.620673   \n","\n","     ChronicCond_Cancer_Deviation  ChronicCond_ObstrPulmonary_Deviation  \\\n","0                        0.510387                              0.412140   \n","1                        0.486939                              0.343145   \n","2                        0.570947                              0.572547   \n","3                        0.636271                              0.441247   \n","4                        0.558119                              0.314334   \n","..                            ...                                   ...   \n","579                      0.591058                              0.577981   \n","580                      0.542076                              0.452182   \n","581                      0.531791                              0.602122   \n","582                      0.527238                              0.424578   \n","583                      0.570841                              0.607532   \n","\n","     ChronicCond_Depression_Deviation  ChronicCond_Diabetes_Deviation  \\\n","0                            0.341990                        0.433284   \n","1                            0.445948                        0.580197   \n","2                            0.563748                        0.558332   \n","3                            0.517800                        0.497880   \n","4                            0.480011                        0.403580   \n","..                                ...                             ...   \n","579                          0.602194                        0.539395   \n","580                          0.446442                        0.494542   \n","581                          0.563553                        0.555795   \n","582                          0.468458                        0.472111   \n","583                          0.487687                        0.500464   \n","\n","     ChronicCond_IschemicHeart_Deviation  ChronicCond_Osteoporasis_Deviation  \\\n","0                               0.338716                            0.330701   \n","1                               0.285609                            0.506423   \n","2                               0.402116                            0.443014   \n","3                               0.330434                            0.342170   \n","4                               0.142336                            0.428679   \n","..                                   ...                                 ...   \n","579                             0.450876                            0.531409   \n","580                             0.507461                            0.424440   \n","581                             0.515617                            0.576213   \n","582                             0.400490                            0.492288   \n","583                             0.535244                            0.534027   \n","\n","     ChronicCond_rheumatoidarthritis_Deviation  ChronicCond_stroke_Deviation  \n","0                                     0.439446                      0.477759  \n","1                                     0.428613                      0.544393  \n","2                                     0.515862                      0.745898  \n","3                                     0.329183                      0.426777  \n","4                                     0.489486                      0.508778  \n","..                                         ...                           ...  \n","579                                   0.551485                      0.608906  \n","580                                   0.500389                      0.689878  \n","581                                   0.534134                      0.666085  \n","582                                   0.525947                      0.602817  \n","583                                   0.520818                      0.631534  \n","\n","[584 rows x 12 columns]\n"]}]},{"cell_type":"code","source":["# Combinar con df_final\n","df_final = pd.merge(df_final, avg_treatments_per_provider[['Provider', 'AvgTreatments_Scaled']], on='Provider', how='left')\n","df_final = pd.merge(df_final, total_reimbursements_per_provider[['Provider', 'TotalReimbursements_Scaled']], on='Provider', how='left')\n","df_final = pd.merge(df_final, chronic_prevalence[['Provider'] + deviation_cols], on='Provider', how='left')"],"metadata":{"id":"FoTWvP5mmP8u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Convert 'PotentialFraud' column to numeric (0 and 1)\n","df_final['PotentialFraud'] = df_final['PotentialFraud'].map({'Yes': 1, 'No': 0})\n","\n","# Matriz de correlación\n","correlation_matrix = df_final[['PotentialFraud', 'AvgTreatments_Scaled', 'TotalReimbursements_Scaled', 'ChronicCond_Cancer_Deviation']].corr()\n","print(correlation_matrix)"],"metadata":{"id":"p3Sal30hmXvB","executionInfo":{"status":"ok","timestamp":1732834140443,"user_tz":360,"elapsed":4,"user":{"displayName":"Elías Joaquín Yáñez Huerta","userId":"11326424779274297318"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5564e825-dc4f-4321-d844-80f93ea58936"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                              PotentialFraud  AvgTreatments_Scaled  \\\n","PotentialFraud                      1.000000              0.334916   \n","AvgTreatments_Scaled                0.334916              1.000000   \n","TotalReimbursements_Scaled          0.006679              0.466844   \n","ChronicCond_Cancer_Deviation        0.011002             -0.012990   \n","\n","                              TotalReimbursements_Scaled  \\\n","PotentialFraud                                  0.006679   \n","AvgTreatments_Scaled                            0.466844   \n","TotalReimbursements_Scaled                      1.000000   \n","ChronicCond_Cancer_Deviation                   -0.074990   \n","\n","                              ChronicCond_Cancer_Deviation  \n","PotentialFraud                                    0.011002  \n","AvgTreatments_Scaled                             -0.012990  \n","TotalReimbursements_Scaled                       -0.074990  \n","ChronicCond_Cancer_Deviation                      1.000000  \n"]}]},{"cell_type":"code","source":["# 1. Combinar con df_final\n","df_final = pd.merge(df_final, avg_treatments_per_provider[['Provider', 'AvgTreatments_Scaled']], on='Provider', how='left')\n","df_final = pd.merge(df_final, total_reimbursements_per_provider[['Provider', 'TotalReimbursements_Scaled']], on='Provider', how='left')\n","df_final = pd.merge(df_final, chronic_prevalence[['Provider'] + deviation_cols], on='Provider', how='left')\n","\n","# 2. Combinar con df_final_test (asegúrate de que chronic_prevalence se calcula también para los datos de prueba)\n","df_final_test = pd.merge(df_final_test, avg_treatments_per_provider[['Provider', 'AvgTreatments_Scaled']], on='Provider', how='left')\n","df_final_test = pd.merge(df_final_test, total_reimbursements_per_provider[['Provider', 'TotalReimbursements_Scaled']], on='Provider', how='left')\n","df_final_test = pd.merge(df_final_test, chronic_prevalence[['Provider'] + deviation_cols], on='Provider', how='left')"],"metadata":{"id":"wulGc3k17ac8"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1wn6fC0NHq8L7gvKIl80qJNWMTBV0ZSLS","timestamp":1732854300855}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}